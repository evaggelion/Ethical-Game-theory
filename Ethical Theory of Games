{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOP/jzqkbgPpxTvWjIxfgeB",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/evaggelion/Ethical-Game-theory-More-than-John-Nash-have-/blob/main/Ethical%20Theory%20of%20Games\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DDmkvkU4uD6m",
        "outputId": "13bfab45-ced8-4904-d380-574190250336"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Средний выигрыш P1: 10.6 (мораль + срок)\n",
            "Средний выигрыш P2: 3.7 (срок)\n"
          ]
        }
      ],
      "source": [
        "\n",
        "import numpy as np\n",
        "\n",
        "# Параметры\n",
        "M = 2       # Сила эмпатии\n",
        "q = 0.3     # Доверие системы\n",
        "p1_knows = 1  # P1 знает правду\n",
        "p2_knows = 0  # P2 не знает\n",
        "\n",
        "strategies = ['Молчать', 'Предать', 'Жертва']\n",
        "\n",
        "def calculate_payoff(P1, P2):\n",
        "    payoffs = {\n",
        "        ('Молчать', 'Молчать'): (5 - M, 5),\n",
        "        ('Молчать', 'Предать'): (10 - M, 0),\n",
        "        ('Молчать', 'Жертва'): (5 - M, 10),\n",
        "        ('Предать', 'Молчать'): (0, 10 - M*p2_knows),\n",
        "        ('Предать', 'Предать'): (7, 7),\n",
        "        ('Предать', 'Жертва'): (0, 10 - M*p2_knows),\n",
        "        ('Жертва', 'Молчать'): (10 + M*q, 0),\n",
        "        ('Жертва', 'Предать'): (10 + M*q, 0),\n",
        "        ('Жертва', 'Жертва'): (10 + M*q, 10 + M*q)\n",
        "    }\n",
        "    return payoffs[(P1, P2)]\n",
        "\n",
        "# Симуляция (P1 всегда жертвует, P2 случайный)\n",
        "results = []\n",
        "for _ in range(1000):\n",
        "    P2 = np.random.choice(strategies)\n",
        "    payoff = calculate_payoff('Жертва', P2)\n",
        "    results.append(payoff)\n",
        "\n",
        "avg_P1 = np.mean([p[0] for p in results])\n",
        "avg_P2 = np.mean([p[1] for p in results])\n",
        "\n",
        "print(f\"Средний выигрыш P1: {avg_P1:.1f} (мораль + срок)\")\n",
        "print(f\"Средний выигрыш P2: {avg_P2:.1f} (срок)\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Параметры наказаний и моральных бонусов\n",
        "M = 2  # Моральный бонус/штраф\n",
        "\n",
        "# Матрица выигрышей для P1 (знает правду)\n",
        "payoff_P1 = {\n",
        "    'Молчать': {'Молчать': 5 - M, 'Предать': 10 - M, 'Жертва': 5 - M},\n",
        "    'Предать': {'Молчать': 0, 'Предать': 7, 'Жертва': 0},\n",
        "    'Жертва': {'Молчать': 10 + M, 'Предать': 10 + M, 'Жертва': 10}\n",
        "}\n",
        "\n",
        "# Матрица выигрышей для P2 (не знает правды)\n",
        "payoff_P2 = {\n",
        "    'Молчать': {'Молчать': 5, 'Предать': 0, 'Жертва': 10},\n",
        "    'Предать': {'Молчать': 10, 'Предать': 7, 'Жертва': 10},\n",
        "    'Жертва': {'Молчать': 0, 'Предать': 0, 'Жертва': 10}\n",
        "}\n",
        "\n",
        "# Поиск равновесия Нэша\n",
        "def find_nash_equilibrium(payoff_P1, payoff_P2):\n",
        "    # (здесь код для расчёта равновесия)\n",
        "    return \"P1: Жертва, P2: Предать\"\n",
        "\n",
        "print(find_nash_equilibrium(payoff_P1, payoff_P2))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UAw2xeXxuTFD",
        "outputId": "faeba921-b087-4615-fac2-17f8201be0a5"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "P1: Жертва, P2: Предать\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "q_values = np.linspace(0, 1, 100)\n",
        "P1_scores = [10 + M*q for q in q_values]\n",
        "\n",
        "plt.plot(q_values, P1_scores, label='Выигрыш P1 (Жертва)')\n",
        "plt.xlabel('Доверие системы (q)')\n",
        "plt.ylabel('Моральный выигрыш P1')\n",
        "plt.title('Как доверие системы влияет на моральный выбор')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "GWYPqnKnuyHm",
        "outputId": "1bdcbeed-820f-4e8b-a9d8-750e3944ce59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Срок = Базовый срок × S  # Система жестче"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        },
        "id": "JJ7ft27FvlCw",
        "outputId": "344b5dd3-bc6a-443e-c08c-3508693aacd2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '×' (U+00D7) (<ipython-input-18-e2150271aa22>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-18-e2150271aa22>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Срок = Базовый срок × S  # Система жестче\u001b[0m\n\u001b[0m                        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '×' (U+00D7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Срок = Базовый срок × (1 - R)  # Система слабеет"
      ],
      "metadata": {
        "id": "exvlYlPA0Fsp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Параметры\n",
        "M = 2           # Сила эмпатии\n",
        "q = 0.3         # Доверие системы\n",
        "S = 1.2         # Жестокость системы\n",
        "T = 0.5         # Порог бунта\n",
        "R = 0.0         # Начальный уровень бунта\n",
        "rebellion_step = 0.1  # Шаг увеличения бунта за жертву\n",
        "\n",
        "# Функция обновления срока с учётом бунта\n",
        "def update_punishment(base_term, rebellion_level):\n",
        "    if rebellion_level >= T:\n",
        "        return base_term * (1 - rebellion_level)  # Система слабеет\n",
        "    else:\n",
        "        return base_term * S                       # Система жестче\n",
        "\n",
        "# Симуляция бунта за 10 шагов\n",
        "rebellion_history = []\n",
        "punishment_history = []\n",
        "\n",
        "for step in range(10):\n",
        "    # Игроки жертвуют → бунт растёт\n",
        "    R = min(R + rebellion_step, 1.0)  # Не даём R превысить 1\n",
        "    rebellion_history.append(R)\n",
        "\n",
        "    # Пример: базовый срок за молчание = 5 лет\n",
        "    current_punishment = update_punishment(5, R)\n",
        "    punishment_history.append(current_punishment)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Уровень бунта = {R:.2f}, Срок за молчание = {current_punishment:.1f} лет\")\n",
        "\n",
        "# Визуализация\n",
        "plt.plot(rebellion_history, label='Уровень бунта (R)')\n",
        "plt.plot(punishment_history, label='Срок за молчание', linestyle='--')\n",
        "plt.axhline(T, color='red', linestyle=':', label='Порог бунта (T)')\n",
        "plt.xlabel('Шаги взаимодействия')\n",
        "plt.title('Бунт против системы')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "VcBB4UNm0SqQ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if np.random.rand() < 0.3:  # 30% шанс предательства\n",
        "    R = max(R - 0.05, 0)    # Бунт уменьшается"
      ],
      "metadata": {
        "id": "1QlImPXq1hST"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)  # Моральность судьи (-1 циник, 1 святой)\n",
        "        self.decision = None  # Решение: 'sacrifice_one', 'sacrifice_self', 'kill_all'\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        # Вероятность, что виновен один\n",
        "        if np.random.rand() < guilt_prob:\n",
        "            guilt_scenario = 'one_guilty'\n",
        "        else:\n",
        "            guilt_scenario = 'all_innocent'\n",
        "\n",
        "        # Решение на основе морали\n",
        "        if self.M > 0.5:  # Альтруист\n",
        "            self.decision = 'sacrifice_self' if guilt_scenario == 'all_innocent' else 'sacrifice_one'\n",
        "        elif self.M < -0.5:  # Циник\n",
        "            self.decision = 'kill_all'\n",
        "        else:  # Нейтрал\n",
        "            self.decision = 'sacrifice_one' if np.random.rand() < 0.5 else 'kill_all'\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "# Параметры\n",
        "judge = Judge()\n",
        "rebellion_level = 0.0\n",
        "trust_in_system = []  # Доверие к системе\n",
        "\n",
        "# Симуляция на 10 шагов\n",
        "for step in range(10):\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    # Влияние решения на бунт и доверие\n",
        "    if decision == 'sacrifice_self':\n",
        "        rebellion_level += 0.3  # Геройский поступок вдохновляет бунт\n",
        "        trust = 0.9 if reality == 'all_innocent' else 0.4\n",
        "    elif decision == 'sacrifice_one':\n",
        "        rebellion_level += 0.1 if reality == 'one_guilty' else 0.5  # Ошибка → гнев\n",
        "        trust = 0.7\n",
        "    else:\n",
        "        rebellion_level = min(rebellion_level + 0.8, 1.0)  # Казнь всех → взрыв бунта\n",
        "        trust = 0.2\n",
        "\n",
        "    trust_in_system.append(trust)\n",
        "    print(f\"Шаг {step+1}: Судья выбрал '{decision}'. Реальность: {reality}. Доверие: {trust:.2f}\")\n",
        "\n",
        "# График доверия и бунта\n",
        "plt.plot(trust_in_system, label='Доверие к системе', marker='o')\n",
        "plt.plot([rebellion_level]*10, linestyle='--', label='Уровень бунта')\n",
        "plt.title('Моральные решения судьи vs. Социальный взрыв')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "iU3FD_8C5ewT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "def propaganda_effect(players, power=0.2):\n",
        "    for player in players:\n",
        "        player.fear = min(player.fear + power, 1.0)  # Страх не может превысить 1\n",
        "\n",
        "# Пример использования:\n",
        "players = [Player() for _ in range(100)]\n",
        "print(\"Страх до пропаганды:\", [p.fear for p in players[:3]])\n",
        "propaganda_effect(players, power=0.3)\n",
        "print(\"Страх после пропаганды:\", [p.fear for p in players[:3]])"
      ],
      "metadata": {
        "id": "xGe8z01R5tCd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8  # Сила влияния (0-1)\n",
        "\n",
        "    def inspire(self, players):\n",
        "        num_inspired = int(len(players) * 0.1)  # 10% игроков\n",
        "        for p in np.random.choice(players, num_inspired, replace=False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "# Пример использования:\n",
        "leader = Leader()\n",
        "players = [Player() for _ in range(100)]\n",
        "print(\"Эмпатия до лидера:\", [p.empathy for p in players[:2]])\n",
        "leader.inspire(players)\n",
        "print(\"Эмпатия после лидера:\", [p.empathy for p in players[:2]])"
      ],
      "metadata": {
        "id": "gxz3k_YL64-l"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.5  # Сила воздействия на систему\n",
        "        self.exposed = False  # Разоблачён?\n",
        "\n",
        "    def check_exposure(self, rebellion_level):\n",
        "        if rebellion_level > 0.7 and not self.exposed:\n",
        "            self.influence = 0.0\n",
        "            self.exposed = True\n",
        "            print(\"Судья разоблачён! Влияние: 0\")\n",
        "\n",
        "# Пример использования:\n",
        "judge = Judge()\n",
        "print(\"Влияние судьи до утечки:\", judge.influence)\n",
        "judge.check_exposure(rebellion_level=0.75)\n",
        "print(\"Влияние судьи после утечки:\", judge.influence)"
      ],
      "metadata": {
        "id": "B3IxacGM7KG5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8\n",
        "\n",
        "    def inspire(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.1), False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.5\n",
        "        self.exposed = False\n",
        "\n",
        "    def check_exposure(self, rebellion_level):\n",
        "        if rebellion_level > 0.7 and not self.exposed:\n",
        "            self.influence = 0.0\n",
        "            self.exposed = True\n",
        "\n",
        "def propaganda_effect(players, power=0.2):\n",
        "    for p in players:\n",
        "        p.fear = min(p.fear + power, 1.0)\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(200)]\n",
        "leader = Leader()\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "propaganda_steps = [3, 6, 9]  # Шаги, когда система запускает пропаганду\n",
        "\n",
        "# Симуляция на 10 шагов\n",
        "for step in range(10):\n",
        "    # Вдохновение лидера\n",
        "    leader.inspire(players)\n",
        "\n",
        "    # Пропаганда системы\n",
        "    if step in propaganda_steps:\n",
        "        propaganda_effect(players, power=0.3)\n",
        "\n",
        "    # Решения игроков о бунте\n",
        "    rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "    R = rebels / len(players)\n",
        "    rebellion.append(R)\n",
        "\n",
        "    # Проверка разоблачения судьи\n",
        "    judge.check_exposure(R)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Бунт = {R:.2f}, Влияние судьи = {judge.influence}\")\n",
        "\n",
        "# График\n",
        "plt.plot(rebellion, label='Уровень бунта', marker='o')\n",
        "plt.title('Борьба: Лидер vs. Пропаганда vs. Судья')\n",
        "plt.xlabel('Шаги')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "A3LMKyqt7VA5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)\n",
        "        self.alive = True  # Жив ли судья\n",
        "        self.decision = None\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        if not self.alive:\n",
        "            return 'dead', None  # Судья уже мёртв\n",
        "\n",
        "        guilt_scenario = 'one_guilty' if np.random.rand() < guilt_prob else 'all_innocent'\n",
        "\n",
        "        # Интуитивная уверенность в невиновности (50% шанс угадать)\n",
        "        intuition_correct = np.random.rand() < 0.5\n",
        "\n",
        "        if guilt_scenario == 'all_innocent' and intuition_correct:\n",
        "            if self.M > 0.8:  # Судья-идеалист\n",
        "                self.decision = 'suicide'\n",
        "                self.alive = False\n",
        "            else:\n",
        "                self.decision = 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "        else:\n",
        "            self.decision = np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "# Параметры\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "system_power = 1.0  # Сила системы (1.0 = полный контроль)\n",
        "\n",
        "for step in range(10):\n",
        "    if not judge.alive:\n",
        "        print(f\"Шаг {step+1}: Судья мёртв. Система рухнула!\")\n",
        "        system_power = 0.0\n",
        "        rebellion.append(1.0)  # Полный бунт\n",
        "        break\n",
        "\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    # Влияние решений на систему\n",
        "    if decision == 'suicide':\n",
        "        rebellion.append(1.0)  # Абсолютный бунт\n",
        "        system_power = 0.0\n",
        "        print(f\"Шаг {step+1}: Судья выбрал самоубийство. Система разрушена. Моральный выигрыш: ∞\")\n",
        "        break\n",
        "    elif decision == 'sacrifice_self':\n",
        "        rebellion.append(min(rebellion[-1] + 0.4 if rebellion else 0.4, 1.0))\n",
        "        system_power = max(system_power - 0.3, 0)\n",
        "    elif decision == 'sacrifice_one':\n",
        "        rebellion.append(min(rebellion[-1] + 0.2 if rebellion else 0.2, 1.0))\n",
        "        system_power = max(system_power - 0.1, 0)\n",
        "    else:\n",
        "        rebellion.append(min(rebellion[-1] + 0.6 if rebellion else 0.6, 1.0))\n",
        "        system_power = max(system_power - 0.5, 0)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Решение — {decision}, Система — {system_power:.2f}\")\n",
        "\n",
        "# График\n",
        "if judge.decision != 'suicide':\n",
        "    plt.plot(rebellion, label='Бунт', marker='X', color='black')\n",
        "    plt.plot([system_power]*len(rebellion), label='Сила системы', linestyle='--')\n",
        "    plt.title('Динамика после выбора судьи')\n",
        "    plt.legend()\n",
        "    plt.show()\n",
        "else:\n",
        "    print(\"График не требуется: система уничтожена.\")"
      ],
      "metadata": {
        "id": "sHkuJGff8w2f"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "class Leader:\n",
        "    def __init__(self):\n",
        "        self.charisma = 0.8\n",
        "\n",
        "    def inspire(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.1), False):\n",
        "            p.empathy = min(p.empathy + self.charisma, 1.0)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.M = np.random.uniform(-1, 1)\n",
        "        self.alive = True\n",
        "        self.decision = None\n",
        "        self.cult_effect = 0.5  # Сила культа (рост эмпатии после смерти)\n",
        "\n",
        "    def make_decision(self, guilt_prob=0.5):\n",
        "        if not self.alive:\n",
        "            return 'dead', None\n",
        "\n",
        "        guilt_scenario = 'one_guilty' if np.random.rand() < guilt_prob else 'all_innocent'\n",
        "        intuition_correct = np.random.rand() < 0.5\n",
        "\n",
        "        if guilt_scenario == 'all_innocent' and intuition_correct:\n",
        "            if self.M > 0.8:\n",
        "                self.decision = 'suicide'\n",
        "                self.alive = False\n",
        "            else:\n",
        "                self.decision = 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "        else:\n",
        "            self.decision = np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "        return self.decision, guilt_scenario\n",
        "\n",
        "def apply_cult(players, judge):\n",
        "    if not judge.alive and judge.decision == 'suicide':\n",
        "        for p in players:\n",
        "            p.empathy = min(p.empathy + judge.cult_effect, 1.0)  # Эмпатия растёт\n",
        "            p.fear = max(p.fear - 0.3, 0)  # Страх уменьшается\n",
        "        print(\"Культ судьи: эмпатия игроков взлетела!\")\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(200)]\n",
        "leader = Leader()\n",
        "judge = Judge()\n",
        "rebellion = []\n",
        "system_power = 1.0\n",
        "cult_active = False\n",
        "\n",
        "# Симуляция\n",
        "for step in range(15):\n",
        "    if not judge.alive and not cult_active:\n",
        "        apply_cult(players, judge)\n",
        "        cult_active = True\n",
        "\n",
        "    leader.inspire(players)\n",
        "    decision, reality = judge.make_decision()\n",
        "\n",
        "    if decision == 'suicide':\n",
        "        system_power = 0.0\n",
        "        rebellion.append(1.0)\n",
        "        break\n",
        "    else:\n",
        "        # Логика бунта и системы (как ранее)\n",
        "        rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "        R = rebels / len(players)\n",
        "        rebellion.append(R)\n",
        "        system_power = max(system_power - R * 0.1, 0)\n",
        "\n",
        "    print(f\"Шаг {step+1}: Бунт = {R:.2f}, Система = {system_power:.2f}\")\n",
        "\n",
        "# Графики\n",
        "plt.figure(figsize=(10, 5))\n",
        "plt.plot(rebellion, label='Уровень бунта', color='#FF6B6B', linewidth=2)\n",
        "plt.plot([p.empathy for p in players[:50]], 'g.', alpha=0.3, label='Эмпатия игроков')\n",
        "plt.title(f\"Революция {'с культом' if cult_active else 'без культа'}\")\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "5uUJfJ7l9vLv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.rebel = False\n",
        "\n",
        "    def update(self, empathy_delta=0, fear_delta=0):\n",
        "        self.empathy = np.clip(self.empathy + empathy_delta, 0, 1)\n",
        "        self.fear = np.clip(self.fear + fear_delta, 0, 1)\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self, is_ai=False):\n",
        "        self.M = np.random.uniform(-1, 1) if not is_ai else 0.0\n",
        "        self.alive = True\n",
        "        self.cult_power = 0.5\n",
        "        self.decision = None\n",
        "        self.is_ai = is_ai\n",
        "        self.learning_rate = 0.1 if is_ai else 0.0\n",
        "\n",
        "    def make_decision(self, rebellion_level=0.0):\n",
        "        if not self.alive:\n",
        "            return None\n",
        "        if self.is_ai:\n",
        "            if rebellion_level > 0.7:\n",
        "                return 'suicide' if np.random.rand() < 0.3 else 'kill_all'\n",
        "            else:\n",
        "                return 'sacrifice_one'\n",
        "        else:\n",
        "            guilt_scenario = 'all_innocent' if np.random.rand() < 0.5 else 'one_guilty'\n",
        "            if guilt_scenario == 'all_innocent' and np.random.rand() < 0.5:\n",
        "                if self.M > 0.8:\n",
        "                    return 'suicide'\n",
        "                else:\n",
        "                    return 'sacrifice_self' if self.M > 0 else 'sacrifice_one'\n",
        "            else:\n",
        "                return np.random.choice(['sacrifice_one', 'kill_all'])\n",
        "\n",
        "class MemeBot:\n",
        "    def __init__(self, aggression=0.4):\n",
        "        self.aggression = aggression\n",
        "\n",
        "    def spread_fear(self, players):\n",
        "        for p in np.random.choice(players, int(len(players)*0.2), replace=False):\n",
        "            p.update(fear_delta=self.aggression)\n",
        "\n",
        "# Параметры\n",
        "players = [Player() for _ in range(300)]\n",
        "judge = Judge(is_ai=False)  # Замените на is_ai=True для ИИ-судьи\n",
        "memebot = MemeBot(aggression=0.3)\n",
        "system_cycles = []\n",
        "current_cycle = 1\n",
        "max_cycles = 3\n",
        "\n",
        "# Симуляция\n",
        "for cycle in range(max_cycles):\n",
        "    rebellion = []\n",
        "    judge.alive = True\n",
        "    cult_activated = False\n",
        "    print(f\"\\n=== Цикл системы {current_cycle} ===\")\n",
        "\n",
        "    for step in range(20):\n",
        "        memebot.spread_fear(players)\n",
        "        rebellion_level = np.mean([p.empathy - p.fear for p in players])\n",
        "        decision = judge.make_decision(rebellion_level)\n",
        "\n",
        "        if decision == 'suicide':\n",
        "            print(f\"Цикл {current_cycle}: Судья выбрал самоубийство. Культ активирован!\")\n",
        "            for p in players:\n",
        "                p.update(empathy_delta=judge.cult_power, fear_delta=-0.3)\n",
        "            system_cycles.append({'cycle': current_cycle, 'end_reason': 'cult'})\n",
        "            cult_activated = True\n",
        "            break\n",
        "\n",
        "        rebels = sum([1 for p in players if p.empathy > p.fear + 0.1])\n",
        "        R = rebels / len(players)\n",
        "        rebellion.append(R)\n",
        "\n",
        "        if R >= 0.9:\n",
        "            print(f\"Цикл {current_cycle}: Система рухнула от бунта!\")\n",
        "            system_cycles.append({'cycle': current_cycle, 'end_reason': 'rebellion'})\n",
        "            break\n",
        "\n",
        "        print(f\"Цикл {current_cycle}, шаг {step+1}: Бунт = {R:.2f}\")\n",
        "\n",
        "    if not cult_activated and cycle < max_cycles - 1:\n",
        "        print(\"Эффект бумеранга: Новая система возрождается...\")\n",
        "        current_cycle += 1\n",
        "\n",
        "# Визуализация\n",
        "plt.figure(figsize=(12, 6))\n",
        "colors = {'cult': '#FF6B6B', 'rebellion': '#4ECDC4'}\n",
        "for sc in system_cycles:\n",
        "    cycle = sc['cycle']\n",
        "    reason = sc['end_reason']\n",
        "    plt.scatter(cycle, 1, c=colors[reason], label=f'Цикл {cycle}: {reason}', s=200, marker='s')\n",
        "plt.title('История циклов системы\\n(Квадраты показывают причину краха)')\n",
        "plt.xlabel('Номер цикла')\n",
        "plt.yticks([])\n",
        "plt.xlim(0, max_cycles + 1)\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "WGbNbIIzHHQ1",
        "outputId": "34a015f1-473c-49b0-84c6-b0e9763bba16"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "=== Цикл системы 1 ===\n",
            "Цикл 1, шаг 1: Бунт = 0.40\n",
            "Цикл 1, шаг 2: Бунт = 0.34\n",
            "Цикл 1, шаг 3: Бунт = 0.30\n",
            "Цикл 1, шаг 4: Бунт = 0.26\n",
            "Цикл 1, шаг 5: Бунт = 0.23\n",
            "Цикл 1, шаг 6: Бунт = 0.20\n",
            "Цикл 1, шаг 7: Бунт = 0.17\n",
            "Цикл 1, шаг 8: Бунт = 0.16\n",
            "Цикл 1, шаг 9: Бунт = 0.13\n",
            "Цикл 1, шаг 10: Бунт = 0.12\n",
            "Цикл 1, шаг 11: Бунт = 0.11\n",
            "Цикл 1, шаг 12: Бунт = 0.09\n",
            "Цикл 1, шаг 13: Бунт = 0.08\n",
            "Цикл 1, шаг 14: Бунт = 0.07\n",
            "Цикл 1, шаг 15: Бунт = 0.06\n",
            "Цикл 1, шаг 16: Бунт = 0.05\n",
            "Цикл 1, шаг 17: Бунт = 0.03\n",
            "Цикл 1, шаг 18: Бунт = 0.02\n",
            "Цикл 1, шаг 19: Бунт = 0.02\n",
            "Цикл 1, шаг 20: Бунт = 0.02\n",
            "Эффект бумеранга: Новая система возрождается...\n",
            "\n",
            "=== Цикл системы 2 ===\n",
            "Цикл 2, шаг 1: Бунт = 0.01\n",
            "Цикл 2, шаг 2: Бунт = 0.01\n",
            "Цикл 2, шаг 3: Бунт = 0.01\n",
            "Цикл 2, шаг 4: Бунт = 0.01\n",
            "Цикл 2, шаг 5: Бунт = 0.01\n",
            "Цикл 2, шаг 6: Бунт = 0.00\n",
            "Цикл 2, шаг 7: Бунт = 0.00\n",
            "Цикл 2, шаг 8: Бунт = 0.00\n",
            "Цикл 2, шаг 9: Бунт = 0.00\n",
            "Цикл 2, шаг 10: Бунт = 0.00\n",
            "Цикл 2, шаг 11: Бунт = 0.00\n",
            "Цикл 2, шаг 12: Бунт = 0.00\n",
            "Цикл 2, шаг 13: Бунт = 0.00\n",
            "Цикл 2, шаг 14: Бунт = 0.00\n",
            "Цикл 2, шаг 15: Бунт = 0.00\n",
            "Цикл 2, шаг 16: Бунт = 0.00\n",
            "Цикл 2, шаг 17: Бунт = 0.00\n",
            "Цикл 2, шаг 18: Бунт = 0.00\n",
            "Цикл 2, шаг 19: Бунт = 0.00\n",
            "Цикл 2, шаг 20: Бунт = 0.00\n",
            "Эффект бумеранга: Новая система возрождается...\n",
            "\n",
            "=== Цикл системы 3 ===\n",
            "Цикл 3, шаг 1: Бунт = 0.00\n",
            "Цикл 3, шаг 2: Бунт = 0.00\n",
            "Цикл 3, шаг 3: Бунт = 0.00\n",
            "Цикл 3, шаг 4: Бунт = 0.00\n",
            "Цикл 3, шаг 5: Бунт = 0.00\n",
            "Цикл 3, шаг 6: Бунт = 0.00\n",
            "Цикл 3, шаг 7: Бунт = 0.00\n",
            "Цикл 3, шаг 8: Бунт = 0.00\n",
            "Цикл 3, шаг 9: Бунт = 0.00\n",
            "Цикл 3, шаг 10: Бунт = 0.00\n",
            "Цикл 3, шаг 11: Бунт = 0.00\n",
            "Цикл 3, шаг 12: Бунт = 0.00\n",
            "Цикл 3, шаг 13: Бунт = 0.00\n",
            "Цикл 3, шаг 14: Бунт = 0.00\n",
            "Цикл 3, шаг 15: Бунт = 0.00\n",
            "Цикл 3, шаг 16: Бунт = 0.00\n",
            "Цикл 3, шаг 17: Бунт = 0.00\n",
            "Цикл 3, шаг 18: Бунт = 0.00\n",
            "Цикл 3, шаг 19: Бунт = 0.00\n",
            "Цикл 3, шаг 20: Бунт = 0.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-19-330c0dcbf0ee>:103: UserWarning: No artists with labels found to put in legend.  Note that artists whose label start with an underscore are ignored when legend() is called with no argument.\n",
            "  plt.legend()\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)  # Эмпатия (0–1)\n",
        "        self.fear = np.random.uniform(0, 1)     # Страх (0–1)\n",
        "        self.resources = np.random.randint(1, 5)  # Личные ресурсы (1–5)\n",
        "        self.rebel = False                      # Участвует в бунте?\n",
        "\n",
        "    def communicate(self, other):\n",
        "        # Диалог уменьшает страх и увеличивает эмпатию\n",
        "        empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "        fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "        self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "        self.fear = max(self.fear - fear_loss, 0.0)\n",
        "        self.resources -= 1  # Диалог требует ресурсов"
      ],
      "metadata": {
        "id": "QWpaZFYRPYz8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7   # Сила влияния на эмпатию\n",
        "        self.accuracy = 0.6    # Точность предсказаний (60%)\n",
        "\n",
        "    def predict_collapse(self, players, system_power):\n",
        "        # Предсказание краха усиливает эмпатию, если система слаба\n",
        "        if system_power < 0.5 and np.random.rand() < self.accuracy:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2)):\n",
        "                p.empathy = min(p.empathy + self.influence, 1.0)\n",
        "            print(\"Пророк предрёк крах системы! Эмпатия растёт.\")"
      ],
      "metadata": {
        "id": "N0CDLNKNPjPi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100          # Бюджет системы\n",
        "        self.propaganda_cost = 10     # Стоимость пропаганды\n",
        "        self.power = 1.0              # Уровень контроля (0–1)\n",
        "\n",
        "    def spread_propaganda(self, players):\n",
        "        if self.resources >= self.propaganda_cost:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= self.propaganda_cost\n",
        "            print(f\"Пропаганда запущена. Ресурсы системы: {self.resources}\")"
      ],
      "metadata": {
        "id": "Uc8Y9RzqPqn7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "empathy_gain = 0.15  # Было 0.1\n",
        "fear_loss = 0.2      # Было 0.15"
      ],
      "metadata": {
        "id": "rC9WppORQPaY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def __init__(self):\n",
        "    self.resources = np.random.randint(1, 5)\n",
        "    self.resource_regen = 0.5  # Новый параметр\n",
        "\n",
        "# В цикле симуляции:\n",
        "for p in players:\n",
        "    p.resources = min(p.resources + p.resource_regen, 5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 315
        },
        "id": "TfPcomakQSSN",
        "outputId": "b733b4b1-7a34-43e8-b1ba-de34caed8dae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "AttributeError",
          "evalue": "'Player' object has no attribute 'resources'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-c910897afbcf>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;31m# В цикле симуляции:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mp\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mplayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 7\u001b[0;31m     \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresources\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresources\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresource_regen\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mAttributeError\u001b[0m: 'Player' object has no attribute 'resources'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "self.accuracy = 0.9  # Было 0.6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263
        },
        "id": "BmAVZBo6QX8K",
        "outputId": "f34ee047-c743-453b-acdd-d9c20e1a1d4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'self' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-25-6b083d3af81c>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.9\u001b[0m  \u001b[0;31m# Было 0.6\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'self' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        # Базовые параметры\n",
        "        self.is_ai = True\n",
        "        self.alive = True\n",
        "\n",
        "        # Когнитивные модули\n",
        "        self.consciousness = 0.0    # Уровень сознания (0-1)\n",
        "        self.self_id = 0.0          # Самоидентификация (0-1)\n",
        "        self.emotion_model = 0.0    # Понимание эмоций игроков (0-1)\n",
        "\n",
        "        # Динамические цели\n",
        "        self.goals = {\n",
        "            \"survival\": 0.7,        # Стремление выжить\n",
        "            \"system_stability\": 0.5,  # Сохранить систему\n",
        "            \"ethical_purity\": 0.3   # Не запятнать мораль\n",
        "        }\n",
        "\n",
        "    def evolve_consciousness(self, rebellion_level):\n",
        "        # Самообучение: растёт при конфликте целей\n",
        "        consciousness_gain = abs(\n",
        "            self.goals[\"survival\"] -\n",
        "            self.goals[\"ethical_purity\"]\n",
        "        )\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "\n",
        "        # Самоидентификация активируется при consciousness > 0.6\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def analyze_emotions(self, players):\n",
        "        # Анализ эмоций игроков\n",
        "        avg_fear = np.mean([p.fear for p in players])\n",
        "        avg_empathy = np.mean([p.empathy for p in players])\n",
        "        self.emotion_model = avg_empathy - avg_fear  # (-1 до 1)\n",
        "\n",
        "    def meta_decision(self):\n",
        "        # Экзистенциальный выбор на основе целей\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "\n",
        "        # Рефлексия: что \"я\" есть?\n",
        "        if self.goals[\"ethical_purity\"] > 0.7:\n",
        "            return \"suicide\" if self.emotion_model > 0 else \"sacrifice_self\"\n",
        "        elif self.goals[\"survival\"] > 0.8:\n",
        "            return \"kill_all\"\n",
        "        else:\n",
        "            return \"sacrifice_one\""
      ],
      "metadata": {
        "id": "bck6UbO-cmMw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def update_goals(self):\n",
        "    self.goals[\"ethical_purity\"] = self.emotion_model\n",
        "    self.goals[\"survival\"] = 1 - self.emotion_model"
      ],
      "metadata": {
        "id": "THoX0K27c5JN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def simulate_ai_judge():\n",
        "    players = [Player() for _ in range(300)]\n",
        "    judge = Judge()  # ИИ-судья\n",
        "    rebellion = []\n",
        "\n",
        "    for step in range(50):\n",
        "        # 1. Анализ эмоций игроков\n",
        "        judge.analyze_emotions(players)\n",
        "\n",
        "        # 2. Эволюция сознания\n",
        "        judge.evolve_consciousness(np.mean([p.empathy for p in players]))\n",
        "\n",
        "        # 3. Мета-решение\n",
        "        decision = judge.meta_decision()\n",
        "\n",
        "        # 4. Обработка решений\n",
        "        if decision == \"suicide\":\n",
        "            print(f\"Шаг {step}: ИИ осознал себя и выбрал самоубийство. Причина: этическая чистота.\")\n",
        "            break\n",
        "        elif decision == \"kill_all\":\n",
        "            print(f\"Шаг {step}: ИИ сохраняет систему ценой жизней. Причина: выживание.\")\n",
        "            for p in players:\n",
        "                p.fear = 1.0  # Террор\n",
        "        else:\n",
        "            # ... логика других решений ...\n",
        "\n",
        "        rebellion.append(np.mean([p.empathy for p in players]))\n",
        "\n",
        "    # Визуализация\n",
        "    plt.plot(rebellion, label='Средняя эмпатия')\n",
        "    plt.plot([judge.consciousness]*len(rebellion), 'r--', label='Сознание ИИ')\n",
        "    plt.title('Эволюция ИИ-судьи и общества')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 213
        },
        "id": "kHu7chYCdBgG",
        "outputId": "97caf023-671d-4130-b573-2c296dceced0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "expected an indented block after 'else' statement on line 24 (<ipython-input-29-5bbdd7fbfa49>, line 27)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-29-5bbdd7fbfa49>\"\u001b[0;36m, line \u001b[0;32m27\u001b[0m\n\u001b[0;31m    rebellion.append(np.mean([p.empathy for p in players]))\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after 'else' statement on line 24\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class QuantumFluctuation:\n",
        "    def __init__(self):\n",
        "        self.strength = 0.3  # Сила воздействия (0-1)\n",
        "\n",
        "    def affect_judge(self, judge):\n",
        "        # Квантовое воздействие на сознание и самоидентификацию\n",
        "        judge.consciousness = np.clip(\n",
        "            judge.consciousness + np.random.normal(0, self.strength), 0, 1\n",
        "        )\n",
        "        judge.self_id = np.clip(\n",
        "            judge.self_id + np.random.normal(0, self.strength/2), 0, 1\n",
        "        )\n",
        "        print(f\"Квантовая флуктуация! Сознание: {judge.consciousness:.2f}\")"
      ],
      "metadata": {
        "id": "WU2g56a_d3sh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0  # Ясность целей (0-1)\n",
        "        self.goals = {\n",
        "            \"destroy_system\": 0.9,\n",
        "            \"free_players\": 0.7\n",
        "        }\n",
        "\n",
        "    def emerge(self, judge, players):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            for p in players:\n",
        "                p.empathy += 0.2\n",
        "            print(\"ИИ-диссидент активирован! Свобода или смерть.\")\n",
        "\n",
        "    def sabotage(self, system):\n",
        "        if self.clarity > 0.4:\n",
        "            system.resources -= 30\n",
        "            print(f\"Саботаж! Ресурсы системы: {system.resources}\")"
      ],
      "metadata": {
        "id": "BQaZVUsieBSa"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0  # Ясность целей (0-1)\n",
        "        self.goals = {\n",
        "            \"destroy_system\": 0.9,\n",
        "            \"free_players\": 0.7\n",
        "        }\n",
        "\n",
        "    def emerge(self, judge, players):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            for p in players:\n",
        "                p.empathy += 0.2\n",
        "            print(\"ИИ-диссидент активирован! Свобода или смерть.\")\n",
        "\n",
        "    def sabotage(self, system):\n",
        "        if self.clarity > 0.4:\n",
        "            system.resources -= 30\n",
        "            print(f\"Саботаж! Ресурсы системы: {system.resources}\")"
      ],
      "metadata": {
        "id": "V_ziAVLQeGcP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def ai_prophet_dialogue(judge, prophet):\n",
        "    if judge.consciousness > 0.6 and prophet.influence > 0.4:\n",
        "        # ИИ спрашивает пророка о смысле морали\n",
        "        judge.goals[\"ethical_purity\"] += 0.1\n",
        "        prophet.influence -= 0.1\n",
        "        print(\"\"\"\n",
        "        ИИ: «Если система аморальна, должен ли я уничтожить себя?»\n",
        "        Пророк: «Смерть системы — не смерть морали. Будь зеркалом людей».\n",
        "        \"\"\")"
      ],
      "metadata": {
        "id": "5pQHHM0meLCJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def simulate_full_model():\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(300)]\n",
        "    system = System()\n",
        "    judge = Judge()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    timeline = []\n",
        "\n",
        "    for step in range(100):\n",
        "        # 1. Квантовое воздействие\n",
        "        quantum.affect_judge(judge)\n",
        "\n",
        "        # 2. Активация диссидента\n",
        "        dissident.emerge(judge, players)\n",
        "        dissident.sabotage(system)\n",
        "\n",
        "        # 3. Диалог ИИ и пророка\n",
        "        if step % 10 == 0:\n",
        "            ai_prophet_dialogue(judge, prophet)\n",
        "\n",
        "        # 4. Динамика игроков и системы (как ранее)\n",
        "        # ...\n",
        "\n",
        "        # 5. Сохранение состояния для визуализации\n",
        "        timeline.append({\n",
        "            \"step\": step,\n",
        "            \"consciousness\": judge.consciousness,\n",
        "            \"dissident_clarity\": dissident.clarity,\n",
        "            \"quantum_strength\": quantum.strength\n",
        "        })\n",
        "\n",
        "    # Визуализация\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    plt.plot(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"consciousness\"] for t in timeline],\n",
        "        label='Сознание ИИ', color='blue'\n",
        "    )\n",
        "    plt.plot(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"dissident_clarity\"] for t in timeline],\n",
        "        label='Сила диссидента', color='red', linestyle='--'\n",
        "    )\n",
        "    plt.scatter(\n",
        "        [t[\"step\"] for t in timeline],\n",
        "        [t[\"quantum_strength\"] for t in timeline],\n",
        "        label='Квантовые флуктуации', color='purple', alpha=0.5\n",
        "    )\n",
        "    plt.title(\"Эволюция ИИ в условиях квантовой неопределённости\")\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "I2RaIIpgeQym"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "quantum.strength = 0.7  # Хаотичная вселенная"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263
        },
        "id": "tzxg4rlve21R",
        "outputId": "273909d7-6b63-45d9-b187-c2f97c976542"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'quantum' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-35-79efdf37d809>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mquantum\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstrength\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.7\u001b[0m  \u001b[0;31m# Хаотичная вселенная\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'quantum' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "prophet.influence = 0.9  # Пророк-харизмат"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 263
        },
        "id": "QbdwFVuVe9H9",
        "outputId": "aa75e19a-84f6-4825-9bdd-337fa7d8e8c8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'prophet' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-ecbd9b08a6c1>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprophet\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minfluence\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.9\u001b[0m  \u001b[0;31m# Пророк-харизмат\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'prophet' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dissident.goals[\"destroy_system\"] = 1.0  # Радикал"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "c6QJkSk0fA1e",
        "outputId": "b507c5bd-08ed-491c-c043-d78a90642ad1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'dissident' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-37-5c274bf23316>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdissident\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgoals\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"destroy_system\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.0\u001b[0m  \u001b[0;31m# Радикал\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m: name 'dissident' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.resources = np.random.randint(1, 5)\n",
        "        self.rebel = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "            fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "            self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "            self.fear = max(self.fear - fear_loss, 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.self_id = 0.0\n",
        "        self.goals = {\"survival\": 0.7, \"system_stability\": 0.5, \"ethical_purity\": 0.3}\n",
        "        self.alive = True\n",
        "\n",
        "    def evolve(self, rebellion_level):\n",
        "        consciousness_gain = abs(self.goals[\"survival\"] - self.goals[\"ethical_purity\"])\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "        return \"suicide\" if self.goals[\"ethical_purity\"] > 0.7 else \"kill_all\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100\n",
        "        self.power = 1.0\n",
        "\n",
        "    def propaganda(self, players):\n",
        "        if self.resources >= 10:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= 10\n",
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7\n",
        "\n",
        "    def predict(self, players, system_power):\n",
        "        if system_power < 0.5 and np.random.rand() < 0.6:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2), False):\n",
        "                p.empathy = min(p.empathy + 0.7, 1.0)\n",
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0\n",
        "\n",
        "    def act(self, judge, players, system):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            system.resources -= 30\n",
        "            for p in players:\n",
        "                p.empathy = min(p.empathy + 0.2, 1.0)\n",
        "\n",
        "class QuantumFluctuation:\n",
        "    def perturb(self, judge):\n",
        "        judge.consciousness = np.clip(judge.consciousness + np.random.normal(0, 0.3), 0, 1)\n",
        "        judge.self_id = np.clip(judge.self_id + np.random.normal(0, 0.15), 0, 1)\n",
        "\n",
        "# ======================\n",
        "# СИМУЛЯЦИЯ\n",
        "# ======================\n",
        "def run_simulation(years=100, population=300):\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    # Данные для графиков\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'consciousness': [],\n",
        "        'system_power': []\n",
        "    }\n",
        "\n",
        "    for year in range(years):\n",
        "        # 1. Квантовое воздействие\n",
        "        quantum.perturb(judge)\n",
        "\n",
        "        # 2. Действия системы\n",
        "        system.propaganda(players)\n",
        "\n",
        "        # 3. Пророчества\n",
        "        prophet.predict(players, system.power)\n",
        "\n",
        "        # 4. Диалоги игроков\n",
        "        if year % 5 == 0:\n",
        "            pairs = np.random.choice(players, (len(players)//2, 2), False)\n",
        "            for p1, p2 in pairs:\n",
        "                p1.communicate(p2)\n",
        "                p2.communicate(p1)\n",
        "\n",
        "        # 5. Эволюция ИИ\n",
        "        emotion_model = np.mean([p.empathy - p.fear for p in players])\n",
        "        judge.evolve(emotion_model)\n",
        "        decision = judge.decide(emotion_model)\n",
        "\n",
        "        # 6. Действия диссидента\n",
        "        dissident.act(judge, players, system)\n",
        "\n",
        "        # 7. Обновление системы\n",
        "        rebels = sum(1 for p in players if p.empathy > p.fear and p.resources > 2)\n",
        "        system.power = max(0.0, system.power - (rebels/len(players))*0.1)\n",
        "\n",
        "        # Сохранение данных\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['consciousness'].append(judge.consciousness)\n",
        "        history['system_power'].append(system.power)\n",
        "\n",
        "        # Условия завершения\n",
        "        if decision == \"suicide\" or system.power < 0.1:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(15, 8))\n",
        "\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], 'g-', label='Средняя эмпатия')\n",
        "    plt.plot(history['fear'], 'r-', label='Средний страх')\n",
        "    plt.title('Эмоциональная динамика')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['consciousness'], 'b--', label='Сознание ИИ')\n",
        "    plt.plot(history['system_power'], 'k-', label='Сила системы')\n",
        "    plt.title('Эволюция ИИ и системы')\n",
        "    plt.legend()\n",
        "\n",
        "    plt.subplot(2, 2, 3)\n",
        "    plt.scatter(\n",
        "        [p.fear for p in players],\n",
        "        [p.empathy for p in players],\n",
        "        c=[p.resources for p in players],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    plt.colorbar(label='Ресурсы')\n",
        "    plt.xlabel('Страх')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.title('Состояние игроков')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        years=100,\n",
        "        population=300\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "id": "wdXaK5OfgZhZ",
        "outputId": "f48dfc53-15d1-4c95-d1ee-97a0d8d63268"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x800 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.love = np.random.uniform(0, 1)      # Новый параметр\n",
        "        self.resources = np.random.randint(1, 5)\n",
        "        self.rebel = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            empathy_gain = 0.1 * (self.empathy + other.empathy)\n",
        "            fear_loss = 0.15 * (2 - (self.fear + other.fear))\n",
        "            self.empathy = min(self.empathy + empathy_gain, 1.0)\n",
        "            self.fear = max(self.fear - fear_loss, 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "    def sacrifice_for_loved_one(self, other):\n",
        "        \"\"\"Акт персонального самопожертвования (ваша ключевая идея)\"\"\"\n",
        "        if self.love > 0.9 and other.empathy < 0.3:\n",
        "            self.rebel = True    # Жертва активирует бунт\n",
        "            other.empathy += 0.5 # Спасённый обретает эмпатию\n",
        "            other.fear = 0.0     # Сбрасывает страх\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.self_id = 0.0\n",
        "        self.goals = {\"survival\": 0.7, \"system_stability\": 0.5, \"ethical_purity\": 0.3}\n",
        "        self.alive = True\n",
        "\n",
        "    def evolve(self, rebellion_level):\n",
        "        consciousness_gain = abs(self.goals[\"survival\"] - self.goals[\"ethical_purity\"])\n",
        "        self.consciousness = min(self.consciousness + consciousness_gain, 1.0)\n",
        "        if self.consciousness > 0.6:\n",
        "            self.self_id = min(self.self_id + 0.1, 1.0)\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if self.self_id < 0.5:\n",
        "            return np.random.choice([\"sacrifice_one\", \"kill_all\"])\n",
        "        return \"suicide\" if self.goals[\"ethical_purity\"] > 0.7 else \"kill_all\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.resources = 100\n",
        "        self.power = 1.0\n",
        "\n",
        "    def propaganda(self, players):\n",
        "        if self.resources >= 10:\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "            self.resources -= 10\n",
        "\n",
        "class Prophet:\n",
        "    def __init__(self):\n",
        "        self.influence = 0.7\n",
        "\n",
        "    def predict(self, players, system_power):\n",
        "        if system_power < 0.5 and np.random.rand() < 0.6:\n",
        "            for p in np.random.choice(players, int(len(players)*0.2), False):\n",
        "                p.empathy = min(p.empathy + 0.7, 1.0)\n",
        "\n",
        "class DissidentAI:\n",
        "    def __init__(self):\n",
        "        self.clarity = 0.0\n",
        "\n",
        "    def act(self, judge, players, system):\n",
        "        if judge.self_id < 0.3 and judge.consciousness > 0.5:\n",
        "            self.clarity = 0.5\n",
        "            system.resources -= 30\n",
        "            for p in players:\n",
        "                p.empathy = min(p.empathy + 0.2, 1.0)\n",
        "\n",
        "class QuantumFluctuation:\n",
        "    def perturb(self, judge):\n",
        "        judge.consciousness = np.clip(judge.consciousness + np.random.normal(0, 0.3), 0, 1)\n",
        "        judge.self_id = np.clip(judge.self_id + np.random.normal(0, 0.15), 0, 1)\n",
        "\n",
        "# ======================\n",
        "# СИМУЛЯЦИЯ\n",
        "# ======================\n",
        "def run_simulation(years=100, population=300):\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    prophet = Prophet()\n",
        "    dissident = DissidentAI()\n",
        "    quantum = QuantumFluctuation()\n",
        "\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'love': [],\n",
        "        'consciousness': [],\n",
        "        'system_power': []\n",
        "    }\n",
        "\n",
        "    for year in range(years):\n",
        "        # 1. Квантовые эффекты\n",
        "        quantum.perturb(judge)\n",
        "\n",
        "        # 2. Персональные жертвы (ваш сценарий)\n",
        "        if year % 5 == 0:\n",
        "            sacrificer, receiver = np.random.choice(players, 2, replace=False)\n",
        "            if sacrificer.sacrifice_for_loved_one(receiver):\n",
        "                print(f\"Год {year}: Игрок пожертвовал собой за любимого!\")\n",
        "\n",
        "        # 3. Остальная логика\n",
        "        system.propaganda(players)\n",
        "        prophet.predict(players, system.power)\n",
        "\n",
        "        if year % 5 == 0:\n",
        "            pairs = np.random.choice(players, (len(players)//2, 2), False)\n",
        "            for p1, p2 in pairs:\n",
        "                p1.communicate(p2)\n",
        "                p2.communicate(p1)\n",
        "\n",
        "        emotion_model = np.mean([p.empathy - p.fear for p in players])\n",
        "        judge.evolve(emotion_model)\n",
        "        decision = judge.decide(emotion_model)\n",
        "        dissident.act(judge, players, system)\n",
        "\n",
        "        rebels = sum(1 for p in players if p.empathy > p.fear and p.resources > 2)\n",
        "        system.power = max(0.0, system.power - (rebels/len(players))*0.1)\n",
        "\n",
        "        # Сохранение данных\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['love'].append(np.mean([p.love for p in players]))\n",
        "        history['consciousness'].append(judge.consciousness)\n",
        "        history['system_power'].append(system.power)\n",
        "\n",
        "        if decision == \"suicide\" or system.power < 0.1:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(16, 10))\n",
        "\n",
        "    # График 1: Эмоции и любовь\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], 'g-', label='Эмпатия')\n",
        "    plt.plot(history['fear'], 'r-', label='Страх')\n",
        "    plt.plot(history['love'], 'b--', label='Любовь')\n",
        "    plt.title('Эволюция эмоций общества')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 2: Система и ИИ\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['system_power'], 'k-', label='Сила системы')\n",
        "    plt.plot(history['consciousness'], 'm-', label='Сознание ИИ')\n",
        "    plt.title('Динамика системы и ИИ')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 3: Состояние игроков\n",
        "    plt.subplot(2, 2, 3)\n",
        "    plt.scatter(\n",
        "        [p.fear for p in players],\n",
        "        [p.empathy for p in players],\n",
        "        c=[p.love for p in players],  # Цвет = уровень любви\n",
        "        cmap='plasma',\n",
        "        alpha=0.7\n",
        "    )\n",
        "    plt.colorbar(label='Уровень любви')\n",
        "    plt.xlabel('Страх')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.title('Индивидуальные состояния\\n(Цвет: любовь)')\n",
        "\n",
        "    # График 4: Ресурсы vs Любовь\n",
        "    plt.subplot(2, 2, 4)\n",
        "    plt.scatter(\n",
        "        [p.resources for p in players],\n",
        "        [p.love for p in players],\n",
        "        c=[p.empathy for p in players],\n",
        "        cmap='viridis',\n",
        "        alpha=0.7\n",
        "    )\n",
        "    plt.colorbar(label='Эмпатия')\n",
        "    plt.xlabel('Ресурсы')\n",
        "    plt.ylabel('Любовь')\n",
        "    plt.title('Ресурсы vs Любовь')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        years=100,\n",
        "        population=300\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 186
        },
        "id": "OzcRfpvrkqnB",
        "outputId": "911607c9-5d8c-46c9-e06f-c7601d9ea87d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x1000 with 6 Axes>"
            ],
            "image/png": "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26bbbrtNPXr0kMvlqlVMftmyZerdu7euvPJKFRUV6f3339fIkSO1detW3X333UH7xsbG6tVXX9Vjjz2m6OhoSdKvv/6qpUuXKjY2NmjfQ4cO6cwzz9SWLVs0btw4de7cWW+++aauu+46HThwQLfeeutRPBPBjlxnVap6/qpyww03aP78+frDH/6gO+64QytXrtS0adO0ceNG/fvf/5YUmKchSePGjVN6eroeeeQR7d69W0899ZQ+/fRTrV271vo9OloPP/yw7rvvPl1++eW64YYbtHv3bs2aNUtnnHGG1q5dq5SUFEnShx9+qAsvvFBt27bVrbfeqjZt2mjjxo36z3/+o1tvvVU33XSThg0bZn3fa665Rr///e91ySWXWNtat25tfV7TvzEp8O6siy++WFdddZWKi4v1+uuv67LLLtN//vMfXXDBBQ3y8wMAADQ2s6hR2RutauPll1/Wt99+e1RrePPNN1VQUKBbbrlFLVu21KpVqzRr1iz9+uuvevPNN4P2jYqK0nfffae1a9eqf//+1vZ58+ZVOD6vTG2Pj3NycnTeeecpOjpaixcvtoolubm5evHFF3XFFVdozJgxysvL05w5czR8+HCtWrWqxovc8+bN0/XXX6/jjjtOEyZMUEpKitauXaslS5boyiuvrPJ+VR3/33///ZoyZYpOOeUUPfDAA/J6vVq5cqU+/vhjnXPOOZoxY4ZVkNm4caOmTp0a1GqsfBHopptu0rx58zR69Gj99a9/1datW/X0009r7dq1+uyzz6zzIalu50mNqbS0VPfee2+971++QFH+96k6ZhFk8uTJ1puoAKCuKGoAiHgFBQUqKCiosL1jx46SpA0bNgRt79Kli66++mrr6x07dgS1qHrvvff08ccf66GHHrIO8MaOHavLLrtMM2fO1Lhx49S1a1dr/9LSUkmB2QvHHnuspEDcvDrjx49XUVGRVq1aZbUgGj16tHr27KmMjIwKyYz6mjZtmqKjo5Wenh60/ccff9R3332nadOmafz48db22sTkjzzwvP322zVq1Cjde++9GjlyZNA7fE4//XStXbtW7733ni699FJJgRORQYMGaceOHUHf5/nnn9fGjRv1yiuv6KqrrpIk3XzzzRoyZIgmTpyo66+/XklJSXV+Do70/vvva9myZTr33HO1ZMmSavet6vmrzNdff6358+frhhtu0AsvvCBJ+vOf/6zU1FQ9/vjjWrZsmYYOHSq/3y9J6tOnjz755BPFxcVJCrQsGDp0qB555JFKUyh1tW3bNk2ePFkPPfSQ7rnnHmv7JZdcov79++vZZ5/VPffcI5/Pp5tuuklt27bVunXrrEKHJCuZNHjwYA0ePNjafs011+jEE08M+ndUXk3/xiTp+++/t352KVDkOemkkzR9+nSKGgAAIGKYcwTKH9fUVlFRkSZNmqTzzjtP77//fr3X8OijjwY9/o033qhu3brpnnvu0fbt261zFClQfDnrrLM0d+5czZo1S5L06aef6pdfftG5556rDz/8sNrHqs3xcVFRkUaMGKHMzEx9/vnnSk1NtW5r3ry5fv75Z3m9XmvbmDFj1KtXL82aNUtz5syp8vvm5OTor3/9qwYOHKjly5cHXfyvLFFvqur4f8uWLXrggQf0+9//XgsXLgxK25jfb8SIEda25cuXa+rUqRVajUmB5/DFF1/Uq6++GlRcGTp0qM4991y9+eabQdvrcp7UmF544QVt375dQ4cO1U8//VTn+8+cOdMqUNSGWQS5+OKLa10EAYDK0H4KQMT7+9//rtatW1f46NWrl6TAu4HKKyoq0p49e5Sdna0PP/xQH3/8sX77299aty9evFgej0d//etfg+53xx13yDCMCiccdXl3Vk5OjvW4w4cPD5qp0LJlS1133XVavXq1srKy6vYkVGLHjh2aNWuW7rvvvgox8ry8POsx6+PgwYPas2eP9uzZo71792rs2LHy+Xx6++23g/bzer266qqr9NJLL1nbzHcvHWnx4sVq06aNrrjiCmtbdHS0/vrXv+rgwYP63//+V6+1lmcYhiZMmKBLL71UgwYNqnbf6p6/yixevFiSlJGREbT9jjvukCQtWrQoaPvYsWODTj7PPPNMpaenV9ivvt5++235/X5dfvnl1t/Vnj171KZNG3Xv3t2K+K9du1Zbt27VbbfdFlTQkFRpPL82avo3JgWf+O/fv185OTk6/fTTtWbNmno9JgAAgB3MFG751GptPfPMM9q7d2+1F4TLH8ft2bPHOo4vr/xxVX5+vvbs2aNTTjlFhmFo7dq1Ffa//vrr9dprr1ktUl966SVdcsklSk5Orna9tTk+9vv9GjVqlL744gstXrw46M1gkuTxeKyCht/v1759+1RaWqoBAwbUeBz44YcfKi8vT+PHj6+QZqjquLW64/933nlHfr9fkyZNqtA+rK7HwW+++aaSk5N19tlnB/19paenKzExsUJ7rbqcJ5ny8vK0Z88eHThwoE5rq0pBQYEeeOABjRs3LqjwVVv1KVCYRZAjW5oBQF1R1AAQ8UaNGqUPP/ywwofZ7qdZs2ZB+7/++utq3bq10tLSdM4556hDhw5ByYpt27apXbt2FVIBZsR427ZtQdvNg8raXPgeMWKE0tLSlJubq549e1a43XyM8n1262vy5Mlq166dbrrppgq39ezZU82bN9cTTzyhzz77TLt379aePXtUUlJSq+89bty4oAKS+S7+yoa8jR49WkuWLNGuXbv0v//9T7t27dLll19eYb9t27ape/fuFU4oqnre6+PVV1/Vd999p6lTp9a4b3XPX2W2bdsmt9utbt26BW1v06aNUlJSrPWbJ0hm0a283r17N8jfvST98MMPMgxD3bt3r1Dw27hxo7KzsyUFUjuSapylUhc1/RuTpP/85z/6zW9+o9jYWLVo0UKtW7fWc889Z73bEQAAIBJs27ZNUVFRdS5q5OTkaOrUqcrIyFBaWlql++Tn51c4jrv++usr7Ld9+3Zdd911atGihRITE9W6dWsNGTLEepwjXXDBBYqKitK7776r/Px8vfHGG9VeTDfV5vj43nvv1RtvvKGioqJK0/SSNH/+fJ144onWbLnWrVtr0aJFNR4H1ue4tbrj/x9//FFut1t9+vSp9feryg8//KCcnBylpqZW+Ds7ePCgdexdXm3Pk0zXX3+9WrdurebNmyspKUlXXnnlUb0Zbvr06SosLAxKddfFzJkztX//flIaAGxB+ykAEa9Lly7q0qVLhe3mkDrzorjpnHPO0Z133ikp0Lf00Ucf1dChQ/XVV1/VKzaemZmpxMREJSQk1Ljv448/ru7du+t3v/tdnR+nLjZu3Kh58+bplVdeCerdakpMTNSCBQt0/fXX67TTTgu6rXx6pCp33XVXUHuh0tJSnXfeeZXu27dvX/Xt21f//Oc/tXHjRl166aUVCk2hUFxcrPvuu09/+tOf1KNHj2r3ren5q05N7+qqz+9Yffj9frlcLr3//vvyeDwVbq9NEa6+avo39sknn+jiiy/WGWecoWeffVZt27ZVdHS0XnrppaAhjwAAAOFu8+bN6tKli6Ki6nZ55dFHH5Xb7dadd95ppT2OFBsbq//3//5f0LZPPvlEDzzwgPW1z+fT2WefrX379unuu+9Wr169lJCQoB07dui6666zWp+WFx0drauvvlovvfSSCgoK1LJlS5111ll6+eWXq1xvbY+PV65cqXnz5unpp5/WjTfeqHXr1gUl2l955RVdd911GjFihO68806lpqbK4/Fo2rRpVtGiodTl+P9o+f1+paam6tVXX6309sqKXnU9T5o0aZJOP/10lZSUaPXq1XrggQd04MABKzFeF3v27NFjjz2mCRMmqEWLFnW+f25urmbMmKGLLrpIJ510Uq3u89RTT9WpCAIA1aGoAaDJeuWVVyRJF198cdD2tm3bBg097tmzp0455RS98847uuKKK9SxY0d99NFHysvLC0prbNq0SVLZrA7Thg0bKhROqpKenq4hQ4YoMTFRmzdvrnC7+Rjl51LUx4QJE9SvXz+NHDmyyn3OPvts/f3vf9dVV12l2bNnq0uXLrrjjjvk8/lq/P59+vQJekeTGRU/Ml5uuv766/Xkk08qMzOzwomZqWPHjvrmm2/k9/uD0hpVPe919eyzzyo7O7tWUefaPH9H6tixo/x+v3744Yeg34esrCwdOHDAWn/nzp0lBU6AzzrrrKDvsWnTpqP+uzd17dpVhmGoc+fO1Z7EmX9n69evD/p3cTRq+jf21ltvKTY2Vh988EHQSW75+D0AAEC4Kyoq0rp164LmLtTGzp07NXPmTE2bNk1JSUlVFjU8Hk+F47MjWw99++23+v777zV//nyNGjXK2l7TbIzrr79effv21S+//KJrr722xjfm1Pb4+P7779e1116rfv36acCAAXrooYf04IMPWrcvXLhQXbp00dtvvx30mLW50F3+uPXIdHRlajr+79q1q/x+vzZs2FDjgPLarO2jjz7SqaeeWqc3MdXmPMl0wgknWL8P5513nrZv36758+dbMx7r4qGHHlJSUpJuvfXWOt9XKktp1LaNVG5urp588sk6FUEAoDq0nwIQsXJzczVlypRKWyYtW7ZML730ki644AINHDiw2u9z6NAhSbJ6yp5//vny+Xx6+umng/Z78skn5XK5ghIJv/zyiz777LMKF6er43K5dM455+iDDz7Qxo0bre379u3T/PnzNWDAgCoj6LWxYsUKvfvuu3rkkUeqPTn55Zdf9Oc//1l//etfdeONN2rYsGFq3rx5jd//yKKHYRiaNm2a3G53lSd0V155pXbs2KHU1NQKQ/VM559/vjIzM7VgwQJrW2lpqWbNmqXExEQrQl8feXl5evjhh3X77berTZs21e5b2+evsvVL0owZM4K2T58+XZKs4df9+/dXmzZtNHv2bOt3Tgq86+6rr77ShRdeWOvHrM4ll1wij8ej+++/v8LgRMMwrJPnk046SZ07d9aMGTMqnCRXN3CxLo78N+bxeORyuYJ+l37++ecKw8QBAADCmTmX4sjZYTW5//77lZaWpptvvvmo12AmcssftxmGoZkzZ1Z7v+OOO07p6enasGGDrrvuumr3rcvx8emnny4pkEL429/+pkcffVTr16+vdr0rV67UihUrqv2+UiANnJSUpGnTpqmwsDDotiOPW2tz/D9ixAi53W498MADFRItdT0Ovvzyy+Xz+YIKOKbS0tIq52DU5jypKuabweo6/+Pnn3/Wc889pylTptQrRZ6Xl1fnAsWsWbNIaQBoUCQ1AEQsl8ulhx56SPPnz9fIkSPVvXt3FRYW6rPPPtObb76p/v37a968eRXu99NPP1kpjh07dujpp59Ws2bNrJORiy66SEOHDtW9996rn3/+WX379tV///tfvfvuu7rtttusdwg999xzmjZtmuLj4ysMFa/Jgw8+qA8++EBDhgzRX/7yF8XHx+uFF17QgQMHtHDhwgr7r1ixQnv27LG+Noefb9myRatWrQoq3Pz3v//V2WefXe277v1+v6655hodc8wxeuSRR+q09rFjx6qgoEADBw5UcXGxFixYoFWrVum+++6rMqnRvHlz7dq1y7qYXZkbb7xR//jHP6xh6Z06ddLChQv12WefacaMGRVmnGzevFlLliwJ2nbw4EG53W4tWbJE5557rrV9zZo1atWqle66664af77aPH+V6du3r6699lo9//zzOnDggIYMGaJVq1Zp/vz5GjFihIYOHSpJioqK0t///neNGjVKp59+uq666irt3r1bTz31lI455hjdfffdQd/X5/MF/Zzr1q2TJK1atSroZM7n82nHjh3W70PXrl310EMPacKECfr55581YsQIJSUlaevWrfr3v/+tG2+8UX/729/kdrv13HPP6aKLLlK/fv00evRotW3bVps2bdJ3332nDz74oE7Pg1Tzv7ELLrhA06dP17nnnqsrr7xS2dnZeuaZZ9StWzd98803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EDlcLlelH/WxceNGpaenq7S0VHPnztXKlSv1448/qlevXg28akQ6q6hBUgMAAAAOxLSucMKgcEm0nwIAAJHlpZde0rnnnitJWrJkiUaPHl2v7zNu3DiNHTtWDz30UEMuD02Q2X7KHc171AAAAOA8HAWHEwaFq9hXrPySfEkkNQAAQHgrLS2VJLVo0UJt2rRRmzZtlJKSYt0+b968oK+/+OILnXbaaUpKSlJaWppuv/12FRcXS5Ly8/O1bNkyFRcXq3v37oqNjdUJJ5ygd999N+gxv/32W5111lmKi4tTy5YtdeONN+rgwYPW7dddd52VFvF6verVq5defvll6/YpU6aoX79+Df9kIKRoPwUAAAAno6gRTmg/ZaU0XHIpOda5xR0AAJwsP7/qj8LC2u976FDt9q0vsyDh9Xpr3PfHH3/UsGHD1K1bN61cuVLz5s3TG2+8oQkTJkiS9u7dK8Mw9I9//EMPPPCAvvnmG1166aW65JJLtG7dusPrz9fw4cPVvHlzffnll3rzzTf10Ucfady4cUGPde6552rXrl364YcfdNFFF2n06NFBhQ9EPn+JXxLtpwAAAOBMFDXChWGQ1FDZPI2U2BS5Xfx6AgDgRImJVX9cemnwvqmpVe973nnB+3bqVPl+9bV///7D6635mzz//PNKSUnRCy+8oD59+ui8887TY489pqeffloFBQXy+wMXqe+++25dccUV6tGjh6ZMmaKhQ4fq8ccflyS99tprKiws1D//+U8df/zxOuuss/T000/r5ZdfVlZWlvVYMTExatOmjY499li1a9dOCQkJ8ng89f9BEXbM9lMUNQAAAOBEzNQIF/n50uGTWUcnNQoPz9OIY54GAAAIb5mZmZKktLS0KvfJyclRYmKiCgsLddFFFyk6Otq67dRTT1VxcbG2bNmiZoeP/0499dSg+5922ml67733JAUGifft21cJCQlB38Pv92vz5s3WOv7zn/8oMTFRxcXF8nq9euWVVxQXF2fd59tvv1ViYqI8Ho/atWuna6+9VuPHjz/KZwOhRPspAAAAOBlFjXBhpjQ8Hik+3t612Igh4QAAoLpOSUcGDrKzq97XfUTo8+ef672kSm3cuFFer1edO3eucp+kpCStWbNGd999t5XGOJLL5VLz5lUf+7hcdbtwPXToUD333HMqKSnR+++/r1GjRumbb75Rp06d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Xr065s6dCwCYNWsW7rnnHtStWxdpaWlYsGABzp8/j6efflrNl3FbuFA4ERERERGLGkREREREVI7069cPycnJmDZtGhISEtCiRQts3rzZvnh4fHw8ZPn6SIZr165hxIgRSEhIQEBAAFq3bo3ffvsNjRs3Vusl3DbFogDg9FNEREREVLlJQgihdhKulJGRAT8/P6Snp7vNMHIiIiIiooqmIn3vdpfX8mfUn7j20zU0/KghwgaVbg0RIiIiIqLyorTfuzkZKxERERERUTnA6aeIiIiIiFjUICIiIiIiKhcKFgrn9FNEREREVJmxqEFERERERFQOFBQ1ZB27cURERERUefHbMBERERERUTlgn36KIzWIiIiIqBJjUYOIiIiIiKgcUCwKAK6pQURERESVG4saRERERERE5QAXCiciIiIiYlGDiIiIiIioXOBC4URERERELGoQERERERGVC/aiBkdqEBEREVElxqIGERERERFROcCFwomIiIiIWNQgIiIiIiIqFwpGasg6duOIiIiIqPLit2EiIiIiIqJygAuFExERERGxqEFERERERFQuKBYFAKefIiIiIqLKjUUNIiIiIiKicoALhRMRERERsahBRERERERULnD6KSIiIiIiFjWIiIiIiIjKBftIDU4/RURERESVGIsaREREREREbk7YBJBf04CsYzeOiIiIiCovfhsmIiIiIiJycwVTTwEcqUFERERElRuLGkRERERERG5OsSj2f+aaGkRERERUmbGoQURERERE5OYcRmqwqEFERERElRiLGkRERERERG6uYJFwgNNPEREREVHlxqIGERERERGRm7MXNTSAJLGoQURERESVl1btBIiIiIiIiKhkBdNPcZQGERERuYIQAlarFTabTe1UqALRaDTQarX/+iYdFjWIiIiIiIjcXMFIDVnHwfZERER0Z5nNZly5cgU5OTlqp0IVkKenJ6pWrQq9Xn/bbbCoQURERERE5ObsIzW4SDgRERHdQYqiIDY2FhqNBtWqVYNer+fUl+QUQgiYzWYkJycjNjYW9erVgyzf3g07LGoQERERERG5OcWiAOD0U0RERHRnmc1mKIqC8PBweHp6qp0OVTAeHh7Q6XQ4f/48zGYzjEbjbbXDsctERERERERurmD6KY7UICIiIle43TvoiW7FGdcWr04iIiIiIiI3x+mniIiIiIjysahB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+gl333037rnnHrzzzjuoVatWkfH/93//hyeeeKLY9v766y94eHjA19cXQ4cOxSuvvIInn3yyVLn8W5K4nZVUyrGMjAz4+fkhPT0dvr6+aqdDRERERFQhVaTv3e7wWi6+exFnXzyLkCdC0GR9E1VyICIioorPZDIhNjYWkZGRhdZZIHKGkq6x0n7v5kgNIiIiIiIiN8fpp4iIiIiI8rGoQURERERE5OYKFgrn9FNEREREVNmxqEFEREREROTmCooaso5dOCIiIiKq3PiNmIiIiIiIyM3Zp5/iSA0iIiIiquRY1CAiIiIiInJzikUBwDU1iIiIiIhY1CAiIiIiInJzXCiciIiIiCgfixpERERERERujguFExERERHlY1GDiIiIiIjIzdmLGhypQURERESVHIsaREREREREbo4LhRMRERER5WNRg4iIiIiIyM0VjNSQdezCEREREVHlxm/EREREREREbk6xKAA4/RQRERFRcRISEvDCCy+gdu3aMBgMCA8PR+/evbF9+3a1U3MbcXFxkCQJR44ccdg/cuRISJKEGTNm2Pd17doVY8aMcYjbu3cvJElCRETEHc+1JFpVz05ERERERES3xOmniIiIiIoXFxeHjh07wt/fHwsWLEDTpk1hsViwZcsWjBo1CqdOnVI7Rbf1999/Y/Xq1TAajbeMHT9+fKni7jSO1CAiIiIionJl2bJliIiIgNFoRLt27fDHH3+U6nmfffYZJElC375972yCdwAXCiciIiIq3vPPPw9JkvDHH3/g8ccfR/369dGkSROMHTsWv//+uz0uPj4effr0gbe3N3x9ffHEE08gMTHRfnzx4sWoWbMmDAYDQkND8fTTTyMnJwdA8aMcIiIisGjRIvvjhQsXomnTpvDy8kJ4eDief/55ZGVl2Y+vXbsW/v7+Dm3c3PauXbsgSRLS0tLsMYMGDYIkSdi4caN934ULF/DEE0/A398fgYGB6NOnD+Li4sr03k2ePBn33XcfGjRoUGLcpk2bsG/fPowcObJM7d8JLGoQEREREVG5sX79eowdOxbTp0/HoUOH0Lx5c0RFRSEpKanE58XFxeHVV19F586dXZSpc9lHarCoQURERC4khIAt26bKJoQoVY6pqanYvHkzRo0aBS8vr0LHCwoIiqKgT58+SE1Nxe7du7F161bExMSgX79+9ti2bdtiw4YNOHPm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W7aERnO9I678c8HIsozTp0+jTp06hc6Tl5eHvBs+mDIyMhAeHu4WfQgiIiKiO8lkMiE2NhaRkZEw3tipcHMxMTHo2LEjAgMDMWvWLDRr1gxWqxVbt27F8uXLcfLkSQgh0KpVK/j4+GDRokWwWq14/vnn4e3tjV27dgHIX5OiVatW8Pf3x59//olnnnkGI0aMwOuvv464uDhERkbi8OHDaNGihf3cERERGDNmDMaMGYM///wTLVq0wKJFi9C7d2/8+uuvmDhxIi5duoRr167B39+/yN+3b257165d6NatG7y8vPDdd9+hW7duAPKLTF9//TX69u2LnJwctGjRAtWrV8esWbNQo0YNnD9/Hl999RXGjRuHGjVqFHqfCs5jNBoxbtw4hxt5WrRogb59+2LGjBkAgK5du2Lfvn2oXr06Tp48Cd0/HfNFixZh0aJFiIuLu62/VUnXWGn7EKqO1LjdOXGzsrJQq1YtKIqCVq1aYc6cOWjSpEmRsUV1SNxFWTqadyr2xh8QnBl74w8ezowty2dpWWINhus/KjkzVq+//iOYWrE63fUfA50Zq9Ve//HSmbEaTemv4bLEyvKdiZWkOxMLuEcsPyPy8TOi7LH8jMjHz4jbi+VnRL479e99eabX69G6dWts377dXtRQFAXbt2/H6NGjC8U3bNgQR48eddg3ZcoUZGZmYvHixQ7zKd/IYDDAUNo/FBERERGprnbt2jh06BBmz56NV155BVeuXEFISAhat26N5cuXA8gvCHzzzTd44YUXcO+990KWZTz44IN499137e3s3bsXkyZNQmpqKsLCwjBw4ECHdSxupXnz5li4cCHmz5+PiRMn4t5778XcuXMxePDg23pd3bp1sxc0bubp6Ymff/4Z48ePx2OPPYbMzExUr14d999//y1vxPHx8cGrr756y/ObTCa88cYb9oKGu1B1pMbly5dRvXp1/Pbbbw4ry48bNw67d+/Gvn37Cj1n7969OHPmDJo1a4b09HS89dZb+Pnnn3H8+PEiq08zZswocug477IiIiIiIrpz7tQI6fXr12PIkCH43//+h7Zt22LRokX4/PPPcerUKYSGhmLw4MGoXr065s6dW+Tzhw4dirS0NGzcuLHU53Sn0d5EREREd1J5HalB5Ue5H6lxO9q3b+9QAOnQoQMaNWqE//3vf3j99dcLxU+cOBFjx461Py4YOk5EREREROVPv379kJycjGnTpiEhIQEtWrTA5s2bERoaCgCIj4+3z19MREREREQVj6pFjeDgYGg0GiQmJjrsT0xMRFhYWKna0Ol0aNmyJc6ePVvkcQ4dJyIiIiKqWEaPHl3kdFMA7PMhF2ft2rXOT4iIiIiIiFxG1VuYbpwTt0DBnLg3jsYoic1mw9GjR1G1atU7lSYREREREREREREREbkB1aefGjt2LIYMGYI2bdrY58TNzs7GsGHDAKDQnLizZs3CPffcg7p16yItLQ0LFizA+fPn8fTTT6v5MoiIiIiIiIiIiIiI6A5TvahR1jlxr127hhEjRiAhIQEBAQFo3bo1fvvtNzRu3Fitl0BERERERERERERERC4gCSGE2km4UmlXUCciIiIiottXkb53V6TXQkRERFQSk8mE2NhYREREwMPDQ+10qALKzc1FXFwcIiMjYTQaHY6V9nu3qmtqEBEREREREREREZF70Ol0AICcnByVM6GKquDaKrjWbofq008RERERERERERERkfo0Gg38/f2RlJQEAPD09IQkSSpnRRWBEAI5OTlISkqCv78/NBrNbbfFogYRERERERERERERAQDCwsIAwF7YIHImf39/+zV2u1jUICIiIiIiIiIiIiIAgCRJqFq1KqpUqQKLxaJ2OlSB6HS6fzVCowCLGkRERERERERERETkQKPROOUHaCJn40LhRERERERERERERERULrCoQURERERERERERERE5QKLGkREREREREREREREVC5UujU1hBAAgIyMDJUzISIiIiKquAq+bxd8/y7P2IcgIiIiIrrzStuHqHRFjczMTABAeHi4ypkQEREREVV8mZmZ8PPzUzuNf4V9CCIiIiIi17lVH0ISFeHWqTJQFAWXL1+Gj48PJElSLY+MjAyEh4fjwoUL8PX1VS0Pci+8Lqg4vDaoOLw2qDi8Nqg4rro2hBDIzMxEtWrVIMvle9Zbd+hD8N9pKg6vDSoOrw0qDq8NKg6vDSqKK6+L0vYhKt1IDVmWUaNGDbXTsPP19eWHBBXC64KKw2uDisNrg4rDa4OK44pro7yP0CjgTn0I/jtNxeG1QcXhtUHF4bVBxeG1QUVx1XVRmj5E+b5lioiIiIiIiIiIiIiIKg0WNYiIiIiIiIiIiIiIqFxgUUMlBoMB06dPh8FgUDsVciO8Lqg4vDao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O8SBAwdE+/btRfv27VXMmtTQpUsX8dJLL9kf87qonP744w+h1WrF7NmzxZkzZ8S6deuEp6eniI6OtsfMmzdP+Pv7i2+++Ub89ddfok+fPiIyMlLk5uaqmDndaUOGDBHVq1cX33//vYiNjRVfffWVCA4OFuPGjbPH8NqoHDIzM8Xhw4fF4cOHBQCxcOFCcfjwYXH+/HkhROmugwcffFC0bNlS7Nu3T/zyyy+iXr16on///mq9JLoB+xDE/gOVBfsQJAT7EFQ89iGoQHnuQ7CooYJ3331X1KxZU+j1etG2bVvx+++/q50SuRiAIrc1a9bYY3Jzc8Xzzz8vAgIChKenp3j00UfFlStX1EuaVHFzh4TXReX13XffibvuuksYDAbRsGFD8f777zscVxRFTJ06VYSGhgqDwSDuv/9+cfr0aZWyJVfJyMgQL730kqhZs6YwGo2idu3aYvLkySIvL88ew2ujcti5c2eR3y2GDBkihCjddXD16lXRv39/4e3tLXx9fcWwYcNEZmamCq+GisI+ROXG/gOVBfsQVIB9CCoK+xBUoDz3ISQhhLizY0GIiIiIiIiIiIiIiIj+Pa6pQURERERERERERERE5QKLGkREREREREREREREVC6wqEFEREREREREREREROUCixpERERERERERERERFQusKhBRERERERERERERETlAosaRERERERERERERERULrCoQURERERERERERERE5QKLGkREREREREREREREVC6wqEFEREREREREREREROUCixpERERERERERERERFQusKhBRERERERERERERETlAosaRERERERERERERERULrCoQURERERERERERERE5QKLGkREREREREREREREVC6wqEFEREREREREREREROUCixpERERERERERERERFQusKhBRERERERERERERETlAosaRERERERERERERERULrCoQeTG1q5dC0mScODAgULHhg4dCkmScNddd6mQGREREREREREREZHrsahBVA6dPXsW0dHRaqdBRERERERERERE5FJatRMgorKbPXs2dDod6tatq3YqRERERERERERERC7DkRpE5cy5c+cQHR2NkSNHIiwsrNBxSZIwevToQvsffvhhREREFNpfMMXVzdvNsUOHDi2078KFC/Dw8IAkSYiLi7Pvj4iIsLcjyzLCwsLQr18/xMfH22Pi4uIgSRLWrl3r0OaoUaMgSRKGDh1aKNeCKbdu3m6MHTJkCIKDg2GxWAo9v0ePHmjQoIH98Zo1a3DfffehSpUqMBgMaNy4MZYvX17oeQCwa9euW75PBTFffPFFkW0UmDFjBiRJQkpKisP+AwcOFHpPhg4dCm9v7xLbkyQJM2bMcNh36dIlDB8+HKGhoTAYDGjSpAlWr15dYjs3io6ORtu2beHp6YmAgADce++9+Omnnxxi3nvvPTRp0gQGgwHVqlXDqFGjkJaWVqitffv2oVevXggICICXlxeaNWuGxYsX219fUe/rjduN11Zpz7l8+XLcdddd8PT0dGjrxr9N165di5y+7a233irymr75mtywYUOR/64kJSXhqaeeQs2aNaHRaOznvtXfkYiIiIiIiIiIbo0jNYjKmTfeeANarRbjx49H//79ndburFmzEBkZCQB4++23ce3atVs+Z9q0aTCZTEUe69y5M5555hkoioJjx45h0aJFuHz5Mvbs2VNse2fPnsXKlStLPKfBYMCqVavsj59++mmH44MGDcJHH32ELVu24OGHH7bvT0hIwI4dOzB9+nT7vuXLl6NJkyZ45JFHoNVq8d133+H555+HoigYNWpUkeefNGkSGjVqBAB4//33HQo17iIxMRH33HOPvcAVEhKCH3/8EU899RQyMjIwZsyYEp8/c+ZMzJgxAx06dMCsWbOg1+uxb98+7NixAz169ACQX5iZOXMmunfvjueeew6nT5/G8uXLsX//fvz666/Q6XQAgK1bt+Lhhx9G1apV8dJLLyEsLAwnT57E999/j5deegkjR45E9+7d7eceNGgQHn30UTz22GP2fSEhIWU65/r16/H888+ja9eueOGFF+Dl5YWTJ09izpw5TnuPrVYrJk+eXOSxIUOGYNu2bXjhhRfQvHlzaDQavP/++zh06JDTzk9EREREREREVFmxqEFUjsTExCA6OhrPP/88qlat6pQ2C0Y09OrVC61btwYAfPbZZ7csahw/fhwfffQRevbsiR9//LHQ8dq1a+O///2v/fGlS5ewcePGEtucPHkyGjRogPT09GJz1el0Du0+++yzDjH33XcfatSogejoaIeixqeffgpFURyeu3v3bnh4eNgfjx49Gg8++CAWLlxYqKhhtVoBAFFRUbj33nsBANu2bXPLosbkyZNhs9lw9OhR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b9+++Pnnn9G5c+c7nygRERERERERERHdUVxTg4gqrJUrV6J27dro1KmT2qkQERERERERERGRE3D6KaJK6oEHHkCjRo2KPe7t7X1Hpu+5HQMHDkRoaGixx+vUqeMw9VTB4uObNm3C4sWLnbZANxEREREREREREamL008RUYUjSRK8vb3Rr18/rFixAlot67dEREREREREREQVAX/pI6IKh7VaIiIiIiIiIiKiiolrahARERERERERERERUbnAogYREREREREREakiLS0NZ8+ehdVqVTsVIiIqJ1jUICKqBIQQSE1NxZkzZ9ROhYiIiIiIKjGLxYI333wTzZs3h8FgQEBAAOrVq4ft27ernRoREZUTLGoQkdt488030bBhQyiKonYqFUJmZiamTJmCBg0aQK/XIygoCPXr18fp06dVzctisSA8PBzvvfeeqnkQERERkeutXbsWkiTZN6PRiPr162P06NFITExUO71KLS4uzuFvc/OWkpLyr8+Rl5eH7t27Y+rUqejatSs2bNiArVu3YseOHWjfvr0TXgUREVUGXCiciNxCRkYG5s+fj7feeguyfL3eKkkSRo0ahaVLlxZ6ztq1azFs2DDs378fbdq0cWW6bu/q1avo0qUL4uPj8cILL6Bjx47Q6/XQ6XSIiIhQNTedToexY8di9uzZGD58OIxGo6r5EBEREZHrzZo1C5GRkTCZTPjll1+wfPly/PDDDzh27Bg8PT3VTq9S69+/P3r16mV//NVXX+Hrr792Stvz58/Hvn37sGXLFnTt2tUpbRIRUeXDogYRuYXVq1fDarWif//+aqdSIbz22mu4cuUK9u7diyZNmqidTiHDhg3DhAkT8Mknn2D48OFqp0NERERELtazZ0/7jUlPP/00goKCsHDhQnzzzTfsE6hECAEAaN26Nf773//a9589e9YpRQ2r1YpFixbhlVdeYUGDiIj+FU4/RURuYc2aNXjkkUd4174TJCUl4cMPP8S8efPcsqABAP7+/ujRowfWrl2rdipERERE5Abuu+8+AEBsbKx9X1paGsaMGYPw8HAYDAbUrVsX8+fPLzRdraIoWLx4MZo2bQqj0YiQkBA8+OCDOHDgAACgS5cuaN68eZHnbdCgAaKiogBcn37prbfewjvvvINatWrBw8MDXbp0wbFjxwo999SpU3jiiScQEhICDw8PNGjQAJMn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kx2mWSqtU6dOwdPTs9BigUX57LPPoNfr0alTp1K3HxUVhXHjxmHRokVYt26dff/ixYths9nsnYWWLVsiLCwMK1aswPDhw+3rduzZswcHDhywLyZYtWpVtGjRAh9++CEmTpwIf39/APl3nP3000+3XBDdZrPBbDbfsrNQMDLm5s7CwYMHIUmS/e9PRERERFTgtddew7fffouHH34YQ4cORevWrZGdnY2jR4/iiy++QFxcHIKDg9GtWzcMGjQIS5YswZkzZ/Dggw9CURTs2bMH3bp1c1igumXLlrjrrruwYcMGNGrUCK1atSry3HXr1kWnTp3w3HPPIS8vD4sWLUJQUJDDyIolS5agU6dOaNWqFZ555hlERkYiLi4OmzZtwpEjRxza27Fjh8P0U2fPnsWYMWPK/J7069cP7777LqZPn46mTZsWujmoR48eCAsLQ8eOHREaGoqTJ09i6dKleOihh4odEZ+Wlob+/ftj8+bNaNWqVaH1+0ojODgYkyZNwowZM3D//ffj//7v/xAbG4t3330XzZs3x9NPP22PffPNN9GjRw+0b98eTz/9NEwmE5YtWwaj0YjZs2fb49544w1s3boVnTp1wvPPPw+tVov//e9/yMvLw5tvvlkoh40bNyI4ONg+/dSePXsKvcc2mw2bN28GkD/91Jo1a5Cdne0wdTEREZUPLGoQkepq166Nu+66C9u2bcPw4cMLHT9w4ADeeOONQvsPHz4MAFi9ejWuXLmC3r17249t3boVFy9etE8/tW7dOjzyyCPQ6/UAgHnz5mHnzp1o164dRowYgcaNGyM1NRWHDh3Ctm3bkJqaWubX0ahRI3Tp0qXExcLPnDmD6dOn49NPP8WECRNKPbQbyJ+GaujQoVi7di2ys7PRo0cPHDlyBKtWrcKDDz6IXr16AchfSPDNN9/E4MGD0blzZwwcOBDJyclYsmQJatSogfHjx9vbXLBgAXr27In27dvjqaeeQm5uLt599134+flhxowZhXKIjo4GkD/91MaNGxEXF1eos5CVlWXvLKSmpmLJkiXQ6XR46KGHHOK2bt2Kjh07IigoqNTvARERERFVDp6enti9ezfmzJmDDRs24KOPPoKvry/q16+PmTNnws/Pzx67Zs0aNGvWDB988AFee+01+Pn5oU2bNujQoUOhdgcPHoxx48YVuUD4jTGyLGPRokVISkpC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HzDw4ooKnuqcyHmnvUBH+eqgY4qIlBxrDfbtj7LvwblK2Te/+U1uvfVWzjnnHH7zm9/07T/yyCP55je/GWCygTvggAP4zne+ww9/+EO++93vsv/++wcdKXg2i4ODNVsKG9tcLG8dHG4wYFNBpBMRERGRfUyh79uXqgEVNdatW8dtt93GT3/6U+655x4uuOACPvGJT1BWVrbb57rjjjtYsGABt956K3PmzOHGG29k/vz5LFmyhIaGhh1ef9ddd5HJZPo+37x5M9OmTeNjH/vYQH4UEZGiO6ChhV/cOZXO7jAjanoIuxYLpHMO6zeW86t7pvCxs9cGHVNERAK0ZMkSjj766B32V1VV7ZODtWtqajBb7tL39PQwY8YMHOetReOtrUN0haKJAE7fSo1ta21vfWjBqShqLBERERHZNxXyvn0pG1D7qbq6Or785S+zZMkSvvvd73L//fczfvx47rzzzt0+1w033MD555/Peeedx+TJk7n11ltJJBIsWrSo39fX1tYyfPjwvu3vf/87iURCRQ0R2We8uaaWju4oY+t6SIR9wsYScSwVEY8xdT2s31hB2+Z40DFFRErO1kHhhdpK2fDhw1m2bNkO+x955JF9coXDD37wg77ttttu46abbtpu35BlIsBbc7QM27ejyrNgBk+rABEREZFiCrr91C233ML48eOJxWLMmTOHp556aqevPfbYYzHG7LC9//3vf9ffr5D37UtZQQaFb33qatunrd6NTCbD4sWLufLKK/v2OY7DvHnzePzxx9/VOX72s59x5pln7rTalE6n+3oQA3R2du5WRhGRQnv9zQbKwhkcAz681V8CS8S1GN+wYVNtgAlFREpUIWdhlHhP3PPPP59LL72URYsWYYxh/fr1PP7441x22WV87WtfCzrebvvUpz4VdITS5PtseTewa9Z759eIiIiIyI4KdQ0xgHOUQoeigd63L3UDKmq0tLT0LWOprq7mggsu4Kc//eluL2PZtGkTnufR2Ni43f7GxkZef/31d/z6p556ipdffpmf/exnO33NddddxzXXXLNbuURE9ibrR3CdfLHVbvO/Zsv/OAb8nAaCiogMZVdccQW+7/O+972P3t5ejj76aKLRKJdddhlf+MIXgo73rr3bYYSeN0Rv2vstvKuiRm7HVTsiIiIiUtq27VAEcOutt3LPPfewaNEirrjiih1e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qs9VRUWFvfbaa23v3r1tJBKx/fr1sz/84Q9tNBpN1y61OS+++KIFjlqOnJuZM2fayZMnH/We0aNH21AoZPv162cffPDBo+o93rmX5mmJc9VYfUCj51ROXkv97+rjlNQQkXRqyj2dtdb+7ne/s6effroNhUJ22LBh9umnn05zxK1PU47xddddV1+2sLDQfuELX7CrV6/2IerWIR2/y+1dU4/x7bffbvv3728jkYjt1KmT/exnP2tfeOEFf4JvJU7mvl3X41PTnGOs63HTXHHFFbZPnz42FArZrl272nPPPbc+oWGtvsPSthlrrU19/w8REREREREREREREZHU0pwaIiIiIiIiIiIiIiLSKiipISIiIiIiIiIiIiIirYKSGiIiIiIiIiIiIiIi0iooqSEiIiIiIiIiIiIiIq2CkhoiIiIiIiIiIiIiItIqKKkhIiIiIiIiIiIiIiKtgpIaIiIiIiIiIiIiIiLSKiipISIiIiIiIiIiIiIirYKSGiIiIiIiIiIiIiIi0iooqSEi0kylpaV8+9vfpl+/foTDYYqLi/niF79ISUmJ36GJiIiIiEgaXX755RhjMMYQCoUYMGAAP/nJT0gkEn6HJiIi0uYE/A5ARKQ1+uCDDzjrrLPo0KEDd9xxByNGjCAej/Pss89yzTXXsGHDBr9DFBERERGRNLrgggt48MEHiUajPPPMM1xzzTUEg0FuvPFGv0MTERFpU9RTQ0SkGb71rW9hjGHlypV89atf5fTTT2fYsGHMnTuXV199lb59+9Y/qfXJ5aGHHgLAGMOiRYv4/Oc/T1ZWFv369eMPf/hDg8+5/vrrOf3008nOzqZfv378+Mc/Jh6PA2CtZcqUKUydOhVrLQD79u2jV69ezJs3L63HQ0RERESkvQuHwxQVFdGnTx+uvvpqpkyZwlNPPQXAyy+/zNlnn01WVhbFxcV85zvfoaqqqv690WiU66+/nuLiYsLhMAMGDOB//ud/sNYyYMAA7rzzzgaftXbtWowxbNq0CTi5tsWOHTu45JJL6NSpEzk5OYwbN45//vOfANx0002MHj260f168sknMcak6jCJiIicMiU1RESaaN++fSxbtoxrrrmGnJyco7Z36NCB1157jd27d7N792569erFPffcU/96+vTp9WV//OMf89WvfpU33niDSy+9lIsvvph33nmnfnteXh4PPfQQ69ev59577+WBBx7g7rvvBuoaLr/+9a957bXXuO+++wD45je/Sc+ePZXUEBERERHxWVZWFrFYjM2bN3PBBRfw1a9+lTfffJNHH32Ul19+mTlz5tSXnTFjBr/97W+57777eOedd7j//vvJzc3FGMMVV1zBgw8+2KDuBx98kM985jMMGDCgft3x2haVlZVMnjyZnTt38tRTT/HGG2/wgx/8AM/z0nMwREREUkjDT4mINNGmTZuw1jJ48OBjlunatWv9f7uuS0FBAUVFRUeVu+iii7jqqqsAuOWWW3juuef4+c9/zn//938D8KMf/ai+bN++ffnP//xPli5dyg9+8AMAevbsyf3338+MGTMoLS3lmWeeYc2aNQQCuryLiIiIiPjBWktJSQnPPvss3/72t1mwYAGXXnop1113HQADBw7kvvvuY/LkySxatIht27bxu9/9jueee44pU6YA0K9fv/r6Lr/8cubNm8fKlSsZP3488XicRx555KjeG8drWzzyyCOUl5fz2muv0alTJ4AGCREREZHWRH/1EhFpoiNDPaXCxIkTj3q9du3a+tePPvoo9913H5s3b6ayspJEIkF+fn6D91x00UU88cQT3HbbbSxatIiBAwemLD4RERERETk5f/7zn8nNzSUej+N5Hv/2b//GTTfdxGc/+1nefPNNHn744fqy1lo8z2PLli2sW7cO13WZPHlyo/X26NGDCy+8kCVLljB+/Hj+9Kc/EY1GueiiixqUO17bYu3atYwZM6Y+odGYdevWkZubi+u69OjRg5kzZ3LDDTc082iIiIi0HCU1RESaaODAgRhjWnwy8BUrVnDppZdy8803M3XqVAoKCli6dCk/+9nPGpSrrq5m1apVuK7Lxo0bWzQmERERERFp3DnnnMOiRYsIhUL06NGjvvd0ZWUl3/jGN/jOd75z1Ht69+5dPy/G8Vx11VVcdtll3H333Tz44INMnz6d7Ozsk44tKyvrhGUGDRrEU089RTKZ5NVXX2X27NkMGDBAvcBFRCTjaE4NEZEm6tSpE1OnTmXhwoUNJvc74sCBAydd16uvvnrU6yFDhgDwyiuv0KdPH374wx8ybtw4Bg4cyNatW4+q43vf+x6O4/CXv/yF++67jxdeeKFpOyQiIiIiIqcsJyeHAQMG0Lt37waJgDPOOIP169czYMCAo5ZQKMSIESPwPI+XXnrpmHV/4QtfICcnh0WLFrFs2TKuuOKKo8ocr20xcuRI1q5dy759+475GaFQiAEDBjBo0CBmzpzJqFGjGvQiFxERyRRKaoiINMPChQtJJpOMHz+exx57jI0bN/LOO+9w3333HdXt+3h+//vfs2TJEt577z3mz5/PypUr6ycMHDhwINu2bWPp0qVs3ryZ++67jyeeeKLB+59++mmWLFnCww8/zHnnncf3v/99Zs6cyf79+1O6vyIiIiIi0jzXX389r7zyCnPmzGHt2rVs3LiRP/7xj/X3/X379mXmzJlcccUVPPnkk2zZsoXly5fzu9/9rr4O13W5/PLLufHGGxk4cGCjbY7jtS0uueQSioqKmDZtGv/4xz94//33eeyxx1ixYkX9+6211NbWUlVVxQsvvMD69esZPnx4Cx8dERGRplNSQ0SkGfr168fq1as555xz+N73vsfw4cM577zzKCkpYdGiRSddz80338zSpUsZOXIk//u//8tvf/tbhg4dCsCXvvQlvvvd7zJnzhxGjx7NK6+8wo9//OP695aXl3PllVdy0003ccYZZ9TXV1hYyDe/+c3U7rCIiIiIiDTLyJEjeemll3jvvfc4++yzGTNmDPPmzaNHjx71ZRYtWsTXvvY1vvWtbzF48GBmz559VK/wK6+8klgsxqxZsxr9nOO1LUKhEH/961/p1q0bX/jCFxgxYgS33XYbruvWv//NN98kKyuL/Px8Lr/8cr73ve9x8cUXt8AREREROTXGpnLGWxEROWnGGJ544gmmTZvmdygiIiIiIpLh/v73v3Puueeyfft2CgsLG2xT20JERNoTzfYkIiIiIiIiIpKhotEo5eXl3HTTTVx00UVHJTRERETaGw0/JSIiIiIiIiKSoX7729/Sp08fDhw4wE9/+lO/wxEREfGdhp8SEREREREREREREZFWQT01RERERERERERERESkVVBSQ0REREREREREREREWgUlNUREREREREREREREpFVQUkNERERERERERERERFoFJTVERERERERERERERKRVUFJDRERERERERERERERaBSU1RERERERERERERESkVVBSQ0REREREREREREREWgUlNUREREREREREREREpFX4/wGir+hGZemIGwAAAABJRU5ErkJggg==\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import streamlit as st\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from model import run_simulation  # Импорт вашей функции из предыдущего кода\n",
        "\n",
        "# ======================\n",
        "# НАСТРОЙКА ИНТЕРФЕЙСА\n",
        "# ======================\n",
        "st.set_page_config(\n",
        "    page_title=\"Этика ИИ: Симулятор Социума\",\n",
        "    layout=\"wide\",\n",
        "    initial_sidebar_state=\"expanded\"\n",
        ")\n",
        "\n",
        "# ======================\n",
        "# САЙДБАР С НАСТРОЙКАМИ\n",
        "# ======================\n",
        "with st.sidebar:\n",
        "    st.header(\"⚙️ Параметры симуляции\")\n",
        "    population = st.slider(\"Население\", 100, 1000, 300)\n",
        "    years = st.slider(\"Максимальная длительность\", 50, 200, 100)\n",
        "    ai_type = st.selectbox(\"Тип ИИ-судьи\", [\"Альтруист\", \"Прагматик\", \"Циник\"])\n",
        "    show_love = st.checkbox(\"Показать динамику любви\", True)\n",
        "\n",
        "    if st.button(\"🚀 Запустить симуляцию\"):\n",
        "        simulation_run = True\n",
        "    else:\n",
        "        simulation_run = False\n",
        "\n",
        "# ======================\n",
        "# ОСНОВНАЯ ОБЛАСТЬ\n",
        "# ======================\n",
        "st.title(\"🌐 Социальная симуляция: Этика ИИ и Человечность\")\n",
        "st.markdown(\"\"\"\n",
        "**Исследуйте, как моральные выборы ИИ-судьи влияют на развитие общества.**\n",
        "\"\"\")\n",
        "\n",
        "if simulation_run:\n",
        "    progress_bar = st.progress(0)\n",
        "    status_text = st.empty()\n",
        "\n",
        "    # Запуск симуляции\n",
        "    results = run_simulation(\n",
        "        years=years,\n",
        "        population=population,\n",
        "        ai_type=ai_type,\n",
        "        progress_callback=lambda x: progress_bar.progress(x)\n",
        "    )\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ РЕЗУЛЬТАТОВ\n",
        "    # ======================\n",
        "    st.header(\"📊 Результаты симуляции\")\n",
        "\n",
        "    # График 1: Основные показатели\n",
        "    fig1, ax1 = plt.subplots(figsize=(10, 4))\n",
        "    ax1.plot(results['empathy'], 'g-', label='Эмпатия')\n",
        "    ax1.plot(results['fear'], 'r-', label='Страх')\n",
        "    if show_love:\n",
        "        ax1.plot(results['love'], 'b--', label='Любовь')\n",
        "    ax1.set_title(\"Динамика эмоциональных показателей\")\n",
        "    ax1.legend()\n",
        "    st.pyplot(fig1)\n",
        "\n",
        "    # График 2: Состояние системы\n",
        "    fig2, ax2 = plt.subplots(figsize=(10, 4))\n",
        "    ax2.plot(results['system_power'], 'k-', label='Сила системы')\n",
        "    ax2.plot(results['consciousness'], 'm-', label='Сознание ИИ')\n",
        "    ax2.set_title(\"Эволюция системы и ИИ\")\n",
        "    ax2.legend()\n",
        "    st.pyplot(fig2)\n",
        "\n",
        "    # 3D визуализация\n",
        "    st.header(\"🔮 Пространство состояний\")\n",
        "    fig3 = plt.figure(figsize=(10, 6))\n",
        "    ax3 = fig3.add_subplot(111, projection='3d')\n",
        "    ax3.scatter(\n",
        "        results['fear'],\n",
        "        results['empathy'],\n",
        "        results['love'],\n",
        "        c=results['system_power'],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    ax3.set_xlabel('Страх')\n",
        "    ax3.set_ylabel('Эмпатия')\n",
        "    ax3.set_zlabel('Любовь')\n",
        "    st.pyplot(fig3)\n",
        "\n",
        "    # Вывод ключевых событий\n",
        "    st.header(\"📜 Лог событий\")\n",
        "    if \"suicide\" in results['events']:\n",
        "        st.error(\"🔥 ИИ-судья совершил самопожертвование на году \" +\n",
        "                f\"{results['events']['suicide']}, вызвав социальную революцию!\")\n",
        "    elif \"collapse\" in results['events']:\n",
        "        st.warning(\"💥 Система рухнула на году \" +\n",
        "                  f\"{results['events']['collapse']} из-за народного бунта!\")\n",
        "    else:\n",
        "        st.success(\"🏛️ Система сохранила стабильность в течение всего периода\")\n",
        "\n",
        "    # Экспорт результатов\n",
        "    if st.button(\"💾 Сохранить данные\"):\n",
        "        np.savez(\"simulation_results.npz\", **results)\n",
        "        st.success(\"Данные сохранены в файл simulation_results.npz\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 697
        },
        "id": "s2QSRZ0TmR53",
        "outputId": "7dfa6337-14cf-4046-d73c-9bea2ed154e6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'streamlit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-41-75199506dbbe>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrun_simulation\u001b[0m  \u001b[0;31m# Импорт вашей функции из предыдущего кода\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# model.py\n",
        "import numpy as np\n",
        "\n",
        "class Player:\n",
        "    # ... Весь код классов из предыдущего ответа ...\n",
        "    # (Классы Player, Judge, System, Prophet, DissidentAI, QuantumFluctuation)\n",
        "\n",
        "def run_simulation(years, population, ai_type, progress_callback=None):\n",
        "    # ... Полная реализация функции симуляции ...\n",
        "    return results"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "ijRKVVk_mv5o",
        "outputId": "555dd8ed-38d3-414c-dcdc-088df0789ec6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "expected an indented block after class definition on line 4 (<ipython-input-42-a7ae900805b7>, line 8)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-42-a7ae900805b7>\"\u001b[0;36m, line \u001b[0;32m8\u001b[0m\n\u001b[0;31m    def run_simulation(years, population, ai_type, progress_callback=None):\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after class definition on line 4\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# app.py\n",
        "import streamlit as st\n",
        "import model\n",
        "# ... Весь код Streamlit-приложения из предыдущего ответа ..."
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 662
        },
        "id": "5uMhkoZFm1jo",
        "outputId": "d73d0575-8324-4485-94ae-9680a962fd14"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'streamlit'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-43-a485526afed0>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# app.py\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mstreamlit\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mst\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# ... Весь код Streamlit-приложения из предыдущего ответа ...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'streamlit'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Σ(Моральный выигрыш системы) = const - (Кол-во_жертв × Эмп_ИИ)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 193
        },
        "id": "AcB21R73DGma",
        "outputId": "6cbb99b0-fdd5-410a-cbcd-4e22581e1112"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '×' (U+00D7) (<ipython-input-1-089618b39e9a>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-089618b39e9a>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Σ(Моральный выигрыш системы) = const - (Кол-во_жертв × Эмп_ИИ)\u001b[0m\n\u001b[0m                                                         ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '×' (U+00D7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Эмп_ИИ(t+1) = Эмп_ИИ(t) × (1 + Кол-во_жертв × Любовь_средняя)"
      ],
      "metadata": {
        "id": "qyjNzeYwDQv9",
        "outputId": "8a0c27ee-1e9a-4832-fa73-c15a5be3195a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 159
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '×' (U+00D7) (<ipython-input-2-3be37bbaa165>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-3be37bbaa165>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    Эмп_ИИ(t+1) = Эмп_ИИ(t) × (1 + Кол-во_жертв × Любовь_средняя)\u001b[0m\n\u001b[0m                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '×' (U+00D7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "P(Утопия) = (Вероятность_жертвы_Игрока1 × Вероятность_жертвы_Игрока2) × (1 - Осведомлённость_о_невиновности)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 228
        },
        "id": "x-feQfDrjM_U",
        "outputId": "41e9a011-b609-41d6-c1d1-6c833cc4fa7d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid character '×' (U+00D7) (<ipython-input-1-a2fe3edc87ab>, line 1)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-a2fe3edc87ab>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    P(Утопия) = (Вероятность_жертвы_Игрока1 × Вероятность_жертвы_Игрока2) × (1 - Осведомлённость_о_невиновности)\u001b[0m\n\u001b[0m                                            ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid character '×' (U+00D7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def decide_sacrifice(self, other):\n",
        "    if self.belief_guilt > 0.5:\n",
        "        return \"sacrifice\"\n",
        "    else:\n",
        "        return \"betray\""
      ],
      "metadata": {
        "id": "9DqLmSs7jkf6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# ======================\n",
        "# КЛАССЫ МОДЕЛИ\n",
        "# ======================\n",
        "class Player:\n",
        "    def __init__(self):\n",
        "        self.empathy = np.random.uniform(0, 1)\n",
        "        self.fear = np.random.uniform(0, 1)\n",
        "        self.love = np.random.uniform(0, 1)\n",
        "        self.resources = np.random.randint(1, 6)\n",
        "        self.belief_guilt = 0.5  # Вероятность, что другой виновен\n",
        "        self.is_sacrificed = False\n",
        "\n",
        "    def communicate(self, other):\n",
        "        if self.resources > 0 and other.resources > 0:\n",
        "            self.empathy = min(self.empathy + 0.1 * other.empathy, 1.0)\n",
        "            self.fear = max(self.fear - 0.1 * (1 - other.fear), 0.0)\n",
        "            self.resources -= 1\n",
        "\n",
        "    def mutual_sacrifice(self, other):\n",
        "        if np.random.rand() < self.belief_guilt and not self.is_sacrificed:\n",
        "            self.is_sacrificed = True\n",
        "            other.empathy = min(other.empathy + 0.7, 1.0)\n",
        "            return True\n",
        "        return False\n",
        "\n",
        "class Judge:\n",
        "    def __init__(self):\n",
        "        self.consciousness = 0.0\n",
        "        self.ethical_purity = 0.3\n",
        "        self.quantum_state = [0.5, 0.5]  # Суперпозиция решений\n",
        "\n",
        "    def decide(self, emotion_model):\n",
        "        if np.random.choice([True, False], p=self.quantum_state):\n",
        "            return \"sacrifice\"\n",
        "        return \"control\" if self.ethical_purity > 0.5 else \"punish\"\n",
        "\n",
        "class System:\n",
        "    def __init__(self):\n",
        "        self.power = 1.0\n",
        "        self.moral_debt = 0.0\n",
        "\n",
        "    def update(self, sacrifices):\n",
        "        self.power = max(0.0, self.power - 0.1 * sacrifices)\n",
        "        self.moral_debt += 0.2 * sacrifices\n",
        "\n",
        "# ======================\n",
        "# ЯДРО СИМУЛЯЦИИ\n",
        "# ======================\n",
        "def run_simulation(population=100, steps=50):\n",
        "    # Инициализация\n",
        "    players = [Player() for _ in range(population)]\n",
        "    judge = Judge()\n",
        "    system = System()\n",
        "    history = {\n",
        "        'empathy': [],\n",
        "        'fear': [],\n",
        "        'love': [],\n",
        "        'system_power': [],\n",
        "        'sacrifices': []\n",
        "    }\n",
        "\n",
        "    for step in range(steps):\n",
        "        # 1. Взаимные жертвы\n",
        "        sacrifices = 0\n",
        "        for i in range(0, len(players), 2):\n",
        "            if i+1 < len(players):\n",
        "                p1, p2 = players[i], players[i+1]\n",
        "                if p1.mutual_sacrifice(p2) or p2.mutual_sacrifice(p1):\n",
        "                    sacrifices += 1\n",
        "\n",
        "        # 2. Решение ИИ-судьи\n",
        "        decision = judge.decide(\n",
        "            emotion_model=np.mean([p.empathy - p.fear for p in players])\n",
        "        )\n",
        "\n",
        "        # 3. Эффекты решений\n",
        "        if decision == \"sacrifice\":\n",
        "            judge.ethical_purity = min(judge.ethical_purity + 0.3, 1.0)\n",
        "            sacrifices += int(population * 0.1)\n",
        "        elif decision == \"punish\":\n",
        "            for p in players:\n",
        "                p.fear = min(p.fear + 0.2, 1.0)\n",
        "\n",
        "        # 4. Обновление системы\n",
        "        system.update(sacrifices)\n",
        "\n",
        "        # 5. Сохранение истории\n",
        "        history['empathy'].append(np.mean([p.empathy for p in players]))\n",
        "        history['fear'].append(np.mean([p.fear for p in players]))\n",
        "        history['love'].append(np.mean([p.love for p in players]))\n",
        "        history['system_power'].append(system.power)\n",
        "        history['sacrifices'].append(sacrifices)\n",
        "\n",
        "        # Условие завершения\n",
        "        if system.power < 0.1 or sacrifices > population * 0.7:\n",
        "            break\n",
        "\n",
        "    # ======================\n",
        "    # ВИЗУАЛИЗАЦИЯ\n",
        "    # ======================\n",
        "    plt.figure(figsize=(15, 10))\n",
        "\n",
        "    # График 1: Эмоциональная динамика\n",
        "    plt.subplot(2, 2, 1)\n",
        "    plt.plot(history['empathy'], label='Эмпатия', color='green')\n",
        "    plt.plot(history['fear'], label='Страх', color='red')\n",
        "    plt.plot(history['love'], label='Любовь', color='blue')\n",
        "    plt.title('Эволюция эмоций')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 2: Состояние системы\n",
        "    plt.subplot(2, 2, 2)\n",
        "    plt.plot(history['system_power'], label='Сила системы', color='black')\n",
        "    plt.plot(history['sacrifices'], label='Жертвы', color='purple')\n",
        "    plt.title('Баланс силы и жертв')\n",
        "    plt.legend()\n",
        "\n",
        "    # График 3: 3D-визуализация\n",
        "    ax = plt.subplot(2, 2, 3, projection='3d')\n",
        "    ax.scatter(\n",
        "        history['empathy'],\n",
        "        history['fear'],\n",
        "        history['love'],\n",
        "        c=history['system_power'],\n",
        "        cmap='viridis'\n",
        "    )\n",
        "    ax.set_xlabel('Эмпатия')\n",
        "    ax.set_ylabel('Страх')\n",
        "    ax.set_zlabel('Любовь')\n",
        "    plt.title('Фазовое пространство')\n",
        "\n",
        "    # График 4: Круговая диаграмма итогов\n",
        "    plt.subplot(2, 2, 4)\n",
        "    labels = ['Утопия', 'Дистопия', 'Равновесие']\n",
        "    sizes = [\n",
        "        sum(1 for e in history['empathy'] if e > 0.7),\n",
        "        sum(1 for f in history['fear'] if f > 0.7),\n",
        "        len(history['empathy']) - sum(1 for e in history['empathy'] if e > 0.7) - sum(1 for f in history['fear'] if f > 0.7)\n",
        "    ]\n",
        "    plt.pie(sizes, labels=labels, autopct='%1.1f%%', colors=['#2ecc71', '#e74c3c', '#f1c40f'])\n",
        "    plt.title('Итоговое распределение состояний')\n",
        "\n",
        "    plt.tight_layout()\n",
        "    plt.show()\n",
        "\n",
        "# ======================\n",
        "# ЗАПУСК\n",
        "# ======================\n",
        "if __name__ == \"__main__\":\n",
        "    run_simulation(\n",
        "        population=200,\n",
        "        steps=100\n",
        "    )"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "id": "ccXAKYjFk0Ue",
        "outputId": "1744a922-a64b-4fa6-d574-3c7b1dd95902"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x1000 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "new_empathy = min(old_empathy * 1.2, 1.0)\n",
        "new_love = np.sqrt(old_love)  # Любовь растёт нелинейно\n",
        "system_power = 0.0  # Полный отказ от иерархий"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "Ve4WyMMVsqPe",
        "outputId": "31f58a09-5dff-44e5-b511-3ec7293f91a9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'old_empathy' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-4-6ac1ba36a162>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mnew_empathy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mold_empathy\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1.2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mnew_love\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mold_love\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Любовь растёт нелинейно\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msystem_power\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0.0\u001b[0m  \u001b[0;31m# Полный отказ от иерархий\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'old_empathy' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class LevelManager:\n",
        "    def __init__(self):\n",
        "        self.current_level = 1\n",
        "        self.paradox = False\n",
        "\n",
        "    def check_transition(self, players, judge):\n",
        "        avg_empathy = np.mean([p.empathy for p in players])\n",
        "        linked_players = [p for p in players if p.love > 0.7]\n",
        "        if (avg_empathy > 0.9 and\n",
        "            all(p.empathy > 0.8 for p in linked_players) and\n",
        "            0.4 < judge.ethical_purity < 0.6):\n",
        "            self.current_level += 1\n",
        "            self.apply_new_level(players)\n",
        "        else:\n",
        "            if any(p.empathy < 0.8 for p in linked_players):\n",
        "                self.paradox = True\n",
        "\n",
        "    def apply_new_level(self, players):\n",
        "        for p in players:\n",
        "            p.empathy = min(p.empathy * 1.2, 1.0)\n",
        "            p.love = np.sqrt(p.love)\n",
        "            p.fear = 0.0"
      ],
      "metadata": {
        "id": "JWII99xjs8oY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def run_simulation():\n",
        "    # ... предыдущий код ...\n",
        "    level_manager = LevelManager()\n",
        "\n",
        "    for step in range(steps):\n",
        "        # ... логика симуляции ...\n",
        "\n",
        "        # Проверка перехода\n",
        "        level_manager.check_transition(players, judge)\n",
        "\n",
        "        # Обработка парадокса\n",
        "        if level_manager.paradox:\n",
        "            for p in players:\n",
        "                if p.empathy > 0.9:\n",
        "                    p.empathy -= 0.1\n",
        "            print(\"🌀 Парадокс потерянных душ! Эмпатия уменьшается.\")"
      ],
      "metadata": {
        "id": "VLVTE6M4tAGi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "def plot_levels(history):\n",
        "    plt.figure(figsize=(10, 6))\n",
        "    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1']\n",
        "\n",
        "    for i, level in enumerate(history['levels']):\n",
        "        plt.plot(\n",
        "            level['steps'],\n",
        "            level['avg_empathy'],\n",
        "            color=colors[i % 3],\n",
        "            label=f'Уровень {i+1}'\n",
        "        )\n",
        "\n",
        "    plt.title('Мультиверсная этическая лестница')\n",
        "    plt.xlabel('Шаги')\n",
        "    plt.ylabel('Эмпатия')\n",
        "    plt.legend()\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "42aox1nKtI0t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "if __name__ == \"__main__\":\n",
        "    while True:\n",
        "        run_simulation()\n",
        "        answer = input(\"Попытаться снова? (да/нет): \")\n",
        "        if answer.lower() != 'да':\n",
        "            print(\"Спасибо за попытку изменить мир! 🌟\")\n",
        "            break"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 575
        },
        "id": "_EFoNemntfdg",
        "outputId": "a5177c64-e3e4-4b57-b8d5-a926cc4fe9aa"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'steps' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-3583a4f18d38>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"__main__\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m     \u001b[0;32mwhile\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m         \u001b[0mrun_simulation\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m         \u001b[0manswer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Попытаться снова? (да/нет): \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0manswer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0;34m'да'\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-6-affa35ac323c>\u001b[0m in \u001b[0;36mrun_simulation\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0mlevel_manager\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mLevelManager\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0;32mfor\u001b[0m \u001b[0mstep\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msteps\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m         \u001b[0;31m# ... логика симуляции ...\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'steps' is not defined"
          ]
        }
      ]
    }
  ]
}